#usda 1.0
(
    defaultPrim = "usdexport1"
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    subLayers = [
        @../../layout/box.usd@
    ]
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "cameras"
{
    bool[] primvars:ri:object:mblur = [0] (
        interpolation = "constant"
    )

    def Camera "camera1" (
        prepend apiSchemas = ["HoudiniCameraPlateAPI", "HoudiniViewportGuideAPI"]
    )
    {
        float2 clippingRange = (1, 1000000)
        float exposure = 0
        float focalLength = 0.5
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.20955
        float horizontalApertureOffset = 0
        asset houdini:backgroundimage = @@
        asset houdini:foregroundimage = @@
        float houdini:guidescale = 1
        bool houdini:inviewermenu = 1
        token projection = "perspective"
        double shutter:close = 0.25
        double shutter:open = -0.25
        float verticalAperture = 0.11787187
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (0.9647590088355206, -6.2041959902892074e-9, 0.2631350506312376, 0), (0.1579477118822981, 0.7998098921430289, -0.5790998676750868, 0), (-0.2104580128715715, 0.6002533935182345, 0.7716237997806917, 0), (-2.007261177040651, 5.717390456177161, 7.360164024255886, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "lights"
{
    bool[] primvars:ri:object:mblur = [0] (
        interpolation = "constant"
    )

    def SphereLight "light1" (
        prepend apiSchemas = ["HoudiniViewportGuideAPI"]
    )
    {
        float houdini:guidescale = 1
        bool houdini:inviewermenu = 1
        color3f inputs:color = (1, 1, 1)
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 0
        float inputs:intensity = 20.7
        bool inputs:normalize = 0
        float inputs:specular = 1
        bool treatAsPoint = 1
        matrix4d xformOp:transform = ( (0.8698608846381661, 2.1419954698842503e-9, 0.49329711267805626, 0), (0.2642446227565915, 0.8444272044720559, -0.4659586630718816, 0), (-0.41655350283094916, 0.535670324311053, 0.7345341945285854, 0), (-1.4025822582831893, 1.6700025926309774, 2.078417116986734, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

over "usdexport1"
{
    bool[] primvars:ri:object:mblur = [0] (
        interpolation = "constant"
    )
}

def Scope "Render"
{
    def Scope "Products"
    {
        def Scope "Vars"
        {
            def RenderVar "Ci"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "ci"
                string sourceName = "Ci"
                token sourceType = "raw"
            }

            def RenderVar "a"
            {
                token dataType = "float"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "a"
                string sourceName = "a"
                token sourceType = "raw"
            }

            def RenderVar "Nn"
            {
                token dataType = "float3"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "nn"
                string sourceName = "Nn"
                token sourceType = "raw"
            }

            def RenderVar "u"
            {
                token dataType = "float"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "u"
                string sourceName = "u"
                token sourceType = "raw"
            }

            def RenderVar "v"
            {
                token dataType = "float"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "v"
                string sourceName = "v"
                token sourceType = "raw"
            }

            def RenderVar "beauty"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "beauty"
                string sourceName = "C[DS]*[<L.>O]"
                token sourceType = "lpe"
            }

            def RenderVar "directDiffuse"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "directdiffuse"
                string sourceName = "C<RD>[<L.>O]"
                token sourceType = "lpe"
            }

            def RenderVar "directSpecular"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "directspecular"
                string sourceName = "C<RS>[<L.>O]"
                token sourceType = "lpe"
            }

            def RenderVar "indirectDiffuse"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "indirectdiffuse"
                string sourceName = "C<RD>[DS]+[<L.>O]"
                token sourceType = "lpe"
            }

            def RenderVar "indirectSpecular"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "indirectspecular"
                string sourceName = "C<RS>[DS]+[<L.>O]"
                token sourceType = "lpe"
            }

            def RenderVar "subsurface"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "subsurface"
                string sourceName = "C<TD>[DS]*[<L.>O]"
                token sourceType = "lpe"
            }

            def RenderVar "directSpecularGlassLobe"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "directspecularglasslobe"
                string sourceName = "C<RS8>[<L.>O]"
                token sourceType = "lpe"
            }

            def RenderVar "indirectSpecularGlassLobe"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "indirectspecularglasslobe"
                string sourceName = "C<RS8>[DS]+[<L.>O]"
                token sourceType = "lpe"
            }

            def RenderVar "subsurfaceLobe"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "subsurfacelobe"
                string sourceName = "CD3[DS]*[<L.>O]"
                token sourceType = "lpe"
            }

            def RenderVar "transmissiveGlassLobe"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "transmissiveglasslobe"
                string sourceName = "C<TS8>.*[<L.>O]"
                token sourceType = "lpe"
            }

            def RenderVar "shadow"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "shadow"
                string sourceName = "holdouts;unoccluded;C[DS]+<L.>"
                token sourceType = "lpe"
            }

            def RenderVar "__depth"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "__depth"
                string sourceName = "__depth"
                token sourceType = "raw"
            }
        }

        def RenderProduct "renderproduct"
        {
            token aspectRatioConformPolicy = "expandAperture"
            rel camera = </cameras/camera1>
            float4 dataWindowNDC = (0, 0, 1, 1)
            custom string driver:parameters:artist = ""
            custom string driver:parameters:comment = ""
            custom string driver:parameters:hostname = ""
            custom int driver:parameters:openexr:asrgba = 1
            custom string driver:parameters:openexr:autocrop = "false"
            custom string driver:parameters:OpenEXR:compression = "zips"
            custom string driver:parameters:openexr:exrcompression = "zips"
            custom string driver:parameters:openexr:exrpixeltype = "half"
            custom string driver:parameters:openexr:storage = "scanline"
            bool instantaneousShutter = 0
            rel orderedVars = [
                </Render/Products/Vars/Ci>,
                </Render/Products/Vars/Nn>,
                </Render/Products/Vars/__depth>,
                </Render/Products/Vars/a>,
                </Render/Products/Vars/beauty>,
                </Render/Products/Vars/directDiffuse>,
                </Render/Products/Vars/directSpecular>,
                </Render/Products/Vars/directSpecularGlassLobe>,
                </Render/Products/Vars/indirectDiffuse>,
                </Render/Products/Vars/indirectSpecular>,
                </Render/Products/Vars/indirectSpecularGlassLobe>,
                </Render/Products/Vars/shadow>,
                </Render/Products/Vars/subsurface>,
                </Render/Products/Vars/subsurfaceLobe>,
                </Render/Products/Vars/transmissiveGlassLobe>,
                </Render/Products/Vars/u>,
                </Render/Products/Vars/v>,
            ]
            float pixelAspectRatio = 1
            token productName.timeSamples = {
                1: "/groups/accomplice/pipeline/pipe/accomplice/software/houdini/test/T_010/render/test_render/test_render.0001.exr",
            }
            token productType = "openexr"
            int2 resolution = (1998, 1080)
        }
    }

    def RenderSettings "rendersettings"
    {
        token aspectRatioConformPolicy = "expandAperture"
        rel camera = </cameras/camera1>
        float4 dataWindowNDC = (0, 0, 1, 1)
        token[] includedPurposes = ["default"]
        bool instantaneousShutter = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        rel products = </Render/Products/renderproduct>
        int2 resolution = (1998, 1080)
        custom string ri:bucket:order = "horizontal"
        custom float2 ri:bucket:orderorigin = (-1, -1)
        custom int ri:checkpoint:asfinal = 0
        custom string ri:checkpoint:command = ""
        custom string ri:checkpoint:exitat = ""
        custom string ri:checkpoint:interval = ""
        custom int ri:checkpoint:keepfiles = 0
        custom float ri:curve:minwidth = 0
        custom float ri:dice:offscreenmultiplier = 1
        custom string ri:displayfilter0:name = "None"
        custom string ri:displayfilter1:name = "None"
        custom string ri:displayfilter2:name = "None"
        custom string ri:displayfilter3:name = "None"
        custom string ri:displayfilter4:name = "None"
        custom int ri:hider:adaptall = 0
        custom string ri:hider:adaptivemetric = "variance"
        custom int ri:hider:bluenoise = 1
        custom float ri:hider:darkfalloff = 0.025
        custom int ri:hider:decidither = 0
        custom float2 ri:hider:exposurebracket = (-1, 1)
        custom int ri:hider:extrememotiondof = 0
        custom int ri:hider:geomShadowTermBias = 1
        custom int ri:hider:maxsamples = 128
        custom int ri:hider:minextrasamples = -1
        custom int ri:hider:minsamples = 12
        custom string ri:hider:pixelfiltermode = "importance"
        custom int ri:hider:sampleoffset = 0
        custom string ri:hider:type = "raytrace"
        custom string ri:integrator:name = "PxrPathTracer"
        custom int ri:integrator:PxrPathTracer:accumOpacity = 0
        custom int ri:integrator:PxrPathTracer:allowCaustics = 0
        custom int ri:integrator:PxrPathTracer:clampDepth = 2
        custom float ri:integrator:PxrPathTracer:clampLuminance = 10
        custom int ri:integrator:PxrPathTracer:jointSampling = 0
        custom int ri:integrator:PxrPathTracer:maxContinuationLength = -1
        custom int ri:integrator:PxrPathTracer:maxIndirectBounces = 8
        custom int ri:integrator:PxrPathTracer:maxNonStochasticOpacityEvents = 0
        custom int ri:integrator:PxrPathTracer:numBxdfSamples = 1
        custom int ri:integrator:PxrPathTracer:numIndirectSamples = 1
        custom int ri:integrator:PxrPathTracer:numLightSamples = 1
        custom int ri:integrator:PxrPathTracer:rouletteDepth = 4
        custom float ri:integrator:PxrPathTracer:rouletteThreshold = 0.2
        custom string ri:integrator:PxrPathTracer:sampleMode = "bxdf"
        custom string ri:integrator:PxrPathTracer:volumeAggregate = "globalVolumeAggregate"
        custom string ri:integrator:PxrPathTracer:volumeAggregateCamera = ""
        custom string ri:integrator:PxrPathTracer:volumeAggregateIndirect = ""
        custom string ri:integrator:PxrPathTracer:volumeAggregateTransmission = ""
        custom int ri:lighting:selectionlearningscheme = 1
        custom int ri:limits:brickmemory = 2097152
        custom int2 ri:limits:bucketsize = (16, 16)
        custom float ri:limits:deepshadowerror = 0.01
        custom int ri:limits:geocachememory = 2097152
        custom int ri:limits:octreememory = 20480
        custom int ri:limits:opacitycachememory = 1048576
        custom float3 ri:limits:othreshold = (0.99609375, 0, 0)
        custom int ri:limits:pointmemory = 20480
        custom int ri:limits:ptexturemaxfiles = 128
        custom int ri:limits:ptexturememory = 32768
        custom float ri:limits:rendermemory = 0
        custom int ri:limits:rendertime = 0
        custom int ri:limits:texturememory = 2097152
        custom float ri:limits:textureperthreadmemoryratio = 0.5
        custom int ri:limits:threads = 0
        custom string ri:lpe:diffuse2 = "Diffuse,HairDiffuse,diffuse,translucent,hair4,irradiance"
        custom string ri:lpe:diffuse3 = "Subsurface,subsurface"
        custom string ri:lpe:specular2 = "Specular,HairSpecularR,specular,hair1"
        custom string ri:lpe:specular3 = "RoughSpecular,HairSpecularTRT,hair3"
        custom string ri:lpe:specular4 = "Clearcoat"
        custom string ri:lpe:specular5 = "Iridescence"
        custom string ri:lpe:specular6 = "Fuzz,HairSpecularGLINTS"
        custom string ri:lpe:specular7 = "SingleScatter,HairSpecularTT,hair2"
        custom string ri:lpe:specular8 = "Glass,specular"
        custom string ri:lpe:user2 = "Albedo,DiffuseAlbedo,SubsurfaceAlbedo,HairAlbedo"
        custom string ri:lpe:user3 = "Position"
        custom string ri:lpe:user4 = "UserColor"
        custom string ri:lpe:user5 = ""
        custom string ri:lpe:user6 = "Normal,DiffuseNormal,HairTangent,SubsurfaceNormal,SpecularNormal,RoughSpecularNormal,SingleScatterNormal,FuzzNormal,IridescenceNormal,GlassNormal"
        custom string ri:lpe:user7 = ""
        custom string ri:lpe:user8 = ""
        custom string ri:lpe:user9 = ""
        custom string ri:lpe:user10 = ""
        custom string ri:lpe:user11 = ""
        custom string ri:lpe:user12 = ""
        custom int ri:osl:batched = 1
        custom int ri:osl:statisticslevel = 0
        custom int ri:osl:verbose = 4
        custom string ri:projection:name = "PxrPerspective"
        custom float ri:projection:PxrPerspective:fovEnd = 0
        custom int ri:Ri:Frame = 0
        custom float ri:Ri:FrameAspectRatio = -1
        custom float ri:Ri:PixelVariance = 0.015
        custom float2 ri:Ri:Shutter = (0, 0)
        custom string ri:samplefilter0:name = "None"
        custom string ri:samplefilter1:name = "None"
        custom string ri:samplefilter2:name = "None"
        custom string ri:samplefilter3:name = "None"
        custom string ri:samplefilter4:name = "None"
        custom float ri:shade:roughnessmollification = 1
        custom int ri:shade:shadowBumpTerminator = 1
        custom int ri:statistics:level = 0
        custom float ri:trace:bvhcompression = 0
        custom float3 ri:trace:worldoffset = (0, 0, 0)
        custom string ri:trace:worldorigin = "camera"
    }
}

