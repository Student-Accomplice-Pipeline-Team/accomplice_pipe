global proc shelf_SA_Rigging () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "from PySide2 import QtWidgets\nimport functools\nimport platform\n\nimport os\n\nclass RiggingToolkitUI(QtWidgets.QDialog):\n    def __init__(self, scripts_dir, parent=None):\n        super(RiggingToolkitUI, self).__init__(parent)\n        self.setWindowTitle('Rigging Toolkit')\n        self.setMinimumWidth(300)\n\n        layout = QtWidgets.QVBoxLayout(self)\n\n        for script_file in os.listdir(scripts_dir):\n            if script_file.endswith('.py') or script_file.endswith('.mel'):\n                script_name = os.path.splitext(script_file)[0]\n                button = QtWidgets.QPushButton(script_name)\n                button.clicked.connect(functools.partial(self.run_script, scripts_dir, script_file))\n                layout.addWidget(button)\n\n    def run_script(self, scripts_dir, script_file):\n        script_path = os.path.join(scripts_dir, script_file)\n        if script_file.endswith('.mel'):\n            mel.eval('source \"{}\";'.format(script_path))\n        else:\n            with open(script_path) as f:\n                script_code = compile(f.read(), script_path, 'exec')\n                exec(script_code)\n\n# Determine the operating system\nif platform.system() == 'Windows':\n    scripts_dir = 'G:/accomplice/characterTeam/InTeamFiles/RiggingScripts'\nelif platform.system() == 'Linux':\n    scripts_dir = '/groups/accomplice/characterTeam/InTeamFiles/RiggingScripts'\nelse:\n    raise NotImplementedError('Unsupported operating system.')\n\nui = RiggingToolkitUI(scripts_dir)\nui.show()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "from PySide2 import QtWidgets\nimport functools\nimport platform\n\n..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "scriptManager" 
        -overlayLabelColor 0 0 0 
        -overlayLabelBackColor 1 1 1 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from PySide2 import QtWidgets\nimport functools\nimport platform\n\nimport os\n\nclass RiggingToolkitUI(QtWidgets.QDialog):\n    def __init__(self, scripts_dir, parent=None):\n        super(RiggingToolkitUI, self).__init__(parent)\n        self.setWindowTitle('Rigging Toolkit')\n        self.setMinimumWidth(300)\n\n        layout = QtWidgets.QVBoxLayout(self)\n\n        for script_file in os.listdir(scripts_dir):\n            if script_file.endswith('.py') or script_file.endswith('.mel'):\n                script_name = os.path.splitext(script_file)[0]\n                button = QtWidgets.QPushButton(script_name)\n                button.clicked.connect(functools.partial(self.run_script, scripts_dir, script_file))\n                layout.addWidget(button)\n\n    def run_script(self, scripts_dir, script_file):\n        script_path = os.path.join(scripts_dir, script_file)\n        if script_file.endswith('.mel'):\n            mel.eval('source \"{}\";'.format(script_path))\n        else:\n            with open(script_path) as f:\n                script_code = compile(f.read(), script_path, 'exec')\n                exec(script_code)\n\n# Determine the operating system\nif platform.system() == 'Windows':\n    scripts_dir = 'G:/accomplice/characterTeam/InTeamFiles/RiggingScripts'\nelif platform.system() == 'Linux':\n    scripts_dir = '/groups/accomplice/characterTeam/InTeamFiles/RiggingScripts'\nelse:\n    raise NotImplementedError('Unsupported operating system.')\n\nui = RiggingToolkitUI(scripts_dir)\nui.show()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import sys\n\nsys.path.append(r'/groups/accomplice/characterTeam/InTeamFiles/RiggingScripts/RigCheckerUi/')\n\nfrom importlib import reload\n\nimport rigCheckerConnect\n\nreload(rigCheckerConnect)\n#rigCheckerConnect.openWindow()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import sys\n\nsys.path.append(r'/groups/accomplice/characterTeam/I..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "rigCheck" 
        -overlayLabelColor 0 0 0 
        -overlayLabelBackColor 1 1 1 0.5 
        -image "checkboxOn.png" 
        -image1 "checkboxOn.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import sys\n\nsys.path.append(r'/groups/accomplice/characterTeam/InTeamFiles/RiggingScripts/RigCheckerUi/')\n\nfrom importlib import reload\n\nimport rigCheckerConnect\n\nreload(rigCheckerConnect)\n#rigCheckerConnect.openWindow()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "#---------------------------------------------------------------------------------------------------------\n'''\nINSTRUCTIONS:\nPut this at the beginning of your script to get access to all the functions we have saved in the OurRiggingFunctions folder\nIt'll import all the functions in that folder that end with .py\n\ne.g. createCube.py is a file in the OurRiggingFunctions folder and will be imported\nas createCube and it has a function inside the file called createCube()\nThus to use that function you just have to write (after running the import code after these instructions):\n\ncreateCube()\n\nand it'll make a simple cube!\n'''\n\nimport os\nimport sys\n\n# get path to OurRiggingFunctions folder depending on Linux or Windows\nif sys.platform == 'linux':\n\tOurRiggingFunctions_Directory = r'/groups/accomplice/characterTeam/InTeamFiles/RiggingScripts/OurRiggingFunctions'\nelse:\n\tOurRiggingFunctions_Directory = r'G:\\accomplice\\characterTeam\\InTeamFiles\\RiggingScripts\\OurRiggingFunctions'\n\ndef list_full_paths(directory):\n    return [os.path.join(directory, file) for file in os.listdir(directory)]\n\nfile_list = list_full_paths(OurRiggingFunctions_Directory)\npythonFiles = []\n\n# get files ending with .py\nfor myFile in file_list:\n\tif myFile.endswith('.py'):\n\t\tpythonFiles.append(myFile)\n\n# run each .py file (thus importing the functions inside those files)\nfor pyFile in pythonFiles:\n\twith open(pyFile) as myFunction:\n\t\texec(myFunction.read())\n#---------------------------------------------------------------------------------------------------------\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "#---------------------------------------------------------------..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "importFunctions" 
        -overlayLabelColor 0 0 0 
        -overlayLabelBackColor 1 1 1 0.5 
        -image "inArrow.png" 
        -image1 "inArrow.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "#---------------------------------------------------------------------------------------------------------\n'''\nINSTRUCTIONS:\nPut this at the beginning of your script to get access to all the functions we have saved in the OurRiggingFunctions folder\nIt'll import all the functions in that folder that end with .py\n\ne.g. createCube.py is a file in the OurRiggingFunctions folder and will be imported\nas createCube and it has a function inside the file called createCube()\nThus to use that function you just have to write (after running the import code after these instructions):\n\ncreateCube()\n\nand it'll make a simple cube!\n'''\n\nimport os\nimport sys\n\n# get path to OurRiggingFunctions folder depending on Linux or Windows\nif sys.platform == 'linux':\n\tOurRiggingFunctions_Directory = r'/groups/accomplice/characterTeam/InTeamFiles/RiggingScripts/OurRiggingFunctions'\nelse:\n\tOurRiggingFunctions_Directory = r'G:\\accomplice\\characterTeam\\InTeamFiles\\RiggingScripts\\OurRiggingFunctions'\n\ndef list_full_paths(directory):\n    return [os.path.join(directory, file) for file in os.listdir(directory)]\n\nfile_list = list_full_paths(OurRiggingFunctions_Directory)\npythonFiles = []\n\n# get files ending with .py\nfor myFile in file_list:\n\tif myFile.endswith('.py'):\n\t\tpythonFiles.append(myFile)\n\n# run each .py file (thus importing the functions inside those files)\nfor pyFile in pythonFiles:\n\twith open(pyFile) as myFunction:\n\t\texec(myFunction.read())\n#---------------------------------------------------------------------------------------------------------\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
