global proc shelf_SA_Rigging () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "from PySide2 import QtWidgets\nimport functools\nimport platform\n\nimport os\n\nclass RiggingToolkitUI(QtWidgets.QDialog):\n    def __init__(self, scripts_dir, parent=None):\n        super(RiggingToolkitUI, self).__init__(parent)\n        self.setWindowTitle('Rigging Toolkit')\n        self.setMinimumWidth(300)\n\n        layout = QtWidgets.QVBoxLayout(self)\n\n        for script_file in os.listdir(scripts_dir):\n            if script_file.endswith('.py') or script_file.endswith('.mel'):\n                script_name = os.path.splitext(script_file)[0]\n                button = QtWidgets.QPushButton(script_name)\n                button.clicked.connect(functools.partial(self.run_script, scripts_dir, script_file))\n                layout.addWidget(button)\n\n    def run_script(self, scripts_dir, script_file):\n        script_path = os.path.join(scripts_dir, script_file)\n        if script_file.endswith('.mel'):\n            mel.eval('source \"{}\";'.format(script_path))\n        else:\n            with open(script_path) as f:\n                script_code = compile(f.read(), script_path, 'exec')\n                exec(script_code)\n\n# Determine the operating system\nif platform.system() == 'Windows':\n    scripts_dir = 'G:/accomplice/characterTeam/InTeamFiles/RiggingScripts'\nelif platform.system() == 'Linux':\n    scripts_dir = '/groups/accomplice/characterTeam/InTeamFiles/RiggingScripts'\nelse:\n    raise NotImplementedError('Unsupported operating system.')\n\nui = RiggingToolkitUI(scripts_dir)\nui.show()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "from PySide2 import QtWidgets\nimport functools\nimport platform\n\n..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "scriptManager" 
        -overlayLabelColor 0 0 0 
        -overlayLabelBackColor 1 1 1 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from PySide2 import QtWidgets\nimport functools\nimport platform\n\nimport os\n\nclass RiggingToolkitUI(QtWidgets.QDialog):\n    def __init__(self, scripts_dir, parent=None):\n        super(RiggingToolkitUI, self).__init__(parent)\n        self.setWindowTitle('Rigging Toolkit')\n        self.setMinimumWidth(300)\n\n        layout = QtWidgets.QVBoxLayout(self)\n\n        for script_file in os.listdir(scripts_dir):\n            if script_file.endswith('.py') or script_file.endswith('.mel'):\n                script_name = os.path.splitext(script_file)[0]\n                button = QtWidgets.QPushButton(script_name)\n                button.clicked.connect(functools.partial(self.run_script, scripts_dir, script_file))\n                layout.addWidget(button)\n\n    def run_script(self, scripts_dir, script_file):\n        script_path = os.path.join(scripts_dir, script_file)\n        if script_file.endswith('.mel'):\n            mel.eval('source \"{}\";'.format(script_path))\n        else:\n            with open(script_path) as f:\n                script_code = compile(f.read(), script_path, 'exec')\n                exec(script_code)\n\n# Determine the operating system\nif platform.system() == 'Windows':\n    scripts_dir = 'G:/accomplice/characterTeam/InTeamFiles/RiggingScripts'\nelif platform.system() == 'Linux':\n    scripts_dir = '/groups/accomplice/characterTeam/InTeamFiles/RiggingScripts'\nelse:\n    raise NotImplementedError('Unsupported operating system.')\n\nui = RiggingToolkitUI(scripts_dir)\nui.show()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import sys\n\nsys.path.append(r'/groups/accomplice/characterTeam/InTeamFiles/RiggingScripts/RigCheckerUi/')\n\nfrom importlib import reload\n\nimport rigCheckerConnect\n\nreload(rigCheckerConnect)\n#rigCheckerConnect.openWindow()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import sys\n\nsys.path.append(r'/groups/accomplice/characterTeam/I..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "rigCheck" 
        -overlayLabelColor 0 0 0 
        -overlayLabelBackColor 1 1 1 0.5 
        -image "checkboxOn.png" 
        -image1 "checkboxOn.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import sys\n\nsys.path.append(r'/groups/accomplice/characterTeam/InTeamFiles/RiggingScripts/RigCheckerUi/')\n\nfrom importlib import reload\n\nimport rigCheckerConnect\n\nreload(rigCheckerConnect)\n#rigCheckerConnect.openWindow()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "#---------------------------------------------------------------------------------------------------------\n'''\nINSTRUCTIONS:\nPut this at the beginning of your script to get access to all the functions we have saved in the OurRiggingFunctions folder\nIt'll import all the functions in that folder that end with .py\n\ne.g. createCube.py is a file in the OurRiggingFunctions folder and will be imported\nas createCube and it has a function inside the file called createCube()\nThus to use that function you just have to write (after running the import code after these instructions):\n\ncreateCube()\n\nand it'll make a simple cube!\n'''\n\nimport os\nimport sys\n\n# get path to OurRiggingFunctions folder depending on Linux or Windows\nif sys.platform == 'linux':\n\tOurRiggingFunctions_Directory = r'/groups/accomplice/characterTeam/InTeamFiles/RiggingScripts/OurRiggingFunctions'\nelse:\n\tOurRiggingFunctions_Directory = r'G:\\accomplice\\characterTeam\\InTeamFiles\\RiggingScripts\\OurRiggingFunctions'\n\ndef list_full_paths(directory):\n    return [os.path.join(directory, file) for file in os.listdir(directory)]\n\nfile_list = list_full_paths(OurRiggingFunctions_Directory)\npythonFiles = []\n\n# get files ending with .py\nfor myFile in file_list:\n\tif myFile.endswith('.py'):\n\t\tpythonFiles.append(myFile)\n\n# run each .py file (thus importing the functions inside those files)\nfor pyFile in pythonFiles:\n\twith open(pyFile) as myFunction:\n\t\texec(myFunction.read())\n#---------------------------------------------------------------------------------------------------------\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "#---------------------------------------------------------------..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "importFunctions" 
        -overlayLabelColor 0 0 0 
        -overlayLabelBackColor 1 1 1 0.5 
        -image "inArrow.png" 
        -image1 "inArrow.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "#---------------------------------------------------------------------------------------------------------\n'''\nINSTRUCTIONS:\nPut this at the beginning of your script to get access to all the functions we have saved in the OurRiggingFunctions folder\nIt'll import all the functions in that folder that end with .py\n\ne.g. createCube.py is a file in the OurRiggingFunctions folder and will be imported\nas createCube and it has a function inside the file called createCube()\nThus to use that function you just have to write (after running the import code after these instructions):\n\ncreateCube()\n\nand it'll make a simple cube!\n'''\n\nimport os\nimport sys\n\n# get path to OurRiggingFunctions folder depending on Linux or Windows\nif sys.platform == 'linux':\n\tOurRiggingFunctions_Directory = r'/groups/accomplice/characterTeam/InTeamFiles/RiggingScripts/OurRiggingFunctions'\nelse:\n\tOurRiggingFunctions_Directory = r'G:\\accomplice\\characterTeam\\InTeamFiles\\RiggingScripts\\OurRiggingFunctions'\n\ndef list_full_paths(directory):\n    return [os.path.join(directory, file) for file in os.listdir(directory)]\n\nfile_list = list_full_paths(OurRiggingFunctions_Directory)\npythonFiles = []\n\n# get files ending with .py\nfor myFile in file_list:\n\tif myFile.endswith('.py'):\n\t\tpythonFiles.append(myFile)\n\n# run each .py file (thus importing the functions inside those files)\nfor pyFile in pythonFiles:\n\twith open(pyFile) as myFunction:\n\t\texec(myFunction.read())\n#---------------------------------------------------------------------------------------------------------\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "'''\nINSTRUCTIONS:\nRun script on given auto-built skeleton using autoSkeletonBuilder.py\nChange the LEFTRIGHT variable to '_R' and re-run for the right eyelid rig\n'''\n\nimport maya.cmds as mc\n\n#LEFTRIGHT='_L'\n\nans = mc.confirmDialog(title = 'Auto-Eye Rigger',\n                       message = 'This will rig eyes and eyelids of our auto-built skeleton. Proceed if you dare...',\n                       button = ['Proceed','Cancel'])\n\ntry:\n    testIfOurFunctionsImported()\nexcept:\n    mc.error('You need to import ourRiggingFunctions first')\n\nif ans == 'Proceed':\n    print('User dares to proceed')\nelse:\n    mc.error('Canceled by user')\n\n#----------------------------P  A  R  T  0----------------------------------\n\nif 'eye_CTRL_L' not in mc.ls(transforms=True):\n    Leye_jnt = 'BIND_eyeball_JNT_L'\n    Reye_jnt = 'BIND_eyeball_JNT_R'\n    \n    import maya.cmds as mc\n    \n    #create L eye ctrl and position it\n    mc.select(cl=True)\n    Leye_ctrl = mc.circle(n='eye_CTRL_L',r=2.5)[0]\n    mc.delete(ch=True)\n    \n    mc.select(Leye_ctrl,Leye_jnt)\n    mc.matchTransform()\n    \n    #create R eye ctrl and position it\n    mc.select(cl=True)\n    Reye_ctrl = mc.circle(n='eye_CTRL_R',r=2.5)[0]\n    mc.delete(ch=True)\n    \n    mc.select(Reye_ctrl,Reye_jnt)\n    mc.matchTransform()\n    \n    #freeze all transforms on L and R eye controls\n    mc.select(Leye_ctrl,Reye_ctrl)\n    mc.move(0,0,20,r=True)\n    mc.makeIdentity(apply=True)\n    LReyeOffsGrps = createOffsetGrp()\n    \n    #create and position main eye control\n    mainEye_ctrl = mc.circle(n='eyesMaster_CTRL',r=10)[0]\n    mc.delete(ch=True)\n    mc.select(mainEye_ctrl,Leye_jnt)\n    mc.matchTransform(pos=True)\n    mc.setAttr(mainEye_ctrl+'.tx',0)\n    mc.select(mainEye_ctrl)\n    mc.move(0,0,20,r=True)\n    mainEyeOffsGrp = createOffsetGrp()\n    \n    mc.parent(LReyeOffsGrps,mainEye_ctrl)\n    \n    #freeze all transforms\n    mc.select(mainEyeOffsGrp,hierarchy=True)\n    mc.makeIdentity(apply=True)\n    \n    #bind each eye geo to corrosponding joint\n    #mc.select(Leye,Leye_jnt)\n    #mc.skinCluster(toSelectedBones=True)\n    \n    #mc.select(Reye,Reye_jnt)\n    #mc.skinCluster(toSelectedBones=True)\n    \n    #aim constrain eye joints to eye controls\n    mc.select(Leye_ctrl,Leye_jnt)\n    mc.aimConstraint(aimVector=(0, 0, 1), upVector=(0, 1, 0), worldUpType=\"vector\", worldUpVector=(0, 1, 0))\n    \n    mc.select(Reye_ctrl,Reye_jnt)\n    mc.aimConstraint(aimVector=(0, 0, 1), upVector=(0, 1, 0), worldUpType=\"vector\", worldUpVector=(0, 1, 0))\n    \n    #create locator in the center of eye joints (for main ctrl off grp aim constraint)\n    eyesCenterLoc = mc.spaceLocator(n='eyesCenter_LOC')\n    mc.move(0,mc.xform(Leye_jnt,q=True,t=True,ws=True)[1],mc.xform(Leye_jnt,q=True,t=True,ws=True)[2])\n    \n    mc.select(eyesCenterLoc,mainEye_ctrl)\n    mc.aimConstraint(aimVector=(0, 0, -1), upVector=(0, 1, 0), worldUpType=\"vector\", worldUpVector=(0, 1, 0))\n    \n    #create master group for eye rig\n    mc.select(mainEyeOffsGrp,eyesCenterLoc)\n    mc.group(name='GRP_eyes')\n    mc.select(mainEye_ctrl)\n    \n    #change controls color\n    mc.select(Leye_ctrl)\n    setCtrlColor('blue')\n    mc.select(Reye_ctrl)\n    setCtrlColor('red')\n    mc.select(mainEye_ctrl)\n    setCtrlColor('yellow')\n    \n    #lock r, s channels on ctrls\n    mc.select(mainEye_ctrl,Leye_ctrl,Reye_ctrl)\n    lockUnlockChannels(lock=True,channels=['R','S'])\n    \n    mc.parentConstraint('BIND_invJaw_JNT',mainEyeOffsGrp,mo=True)\n    mc.hide('eyesCenter_LOC')\n    \n    mc.select(cl=True)\n\n\n#----------------------------P  A  R  T  1----------------------------------\n\nfor lrVar in ['_L','_R']:\n    LEFTRIGHT = lrVar\n    from maya import cmds as mc, OpenMaya\n    \n    #top3Bottom3ControlJoints = mc.ls(sl=True)\n    top3Bottom3ControlJoints = ['BIND_eyelidUp_04_JNT'+LEFTRIGHT,\n                                'BIND_eyelidUp_08_JNT'+LEFTRIGHT,\n                                'BIND_eyelidUp_12_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_04_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_08_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_12_JNT'+LEFTRIGHT]\n    \n    # define side of eye joints\n    ML_LEFTRIGHT_SET = 'BIND_ML_Eyelid_JNT'+LEFTRIGHT\n    MR_LEFTRIGHT_SET = 'BIND_MR_Eyelid_JNT'+LEFTRIGHT\n    \n    # define upper eyelid joints from left to right not including side joints\n    upEyelid_LEFTRIGHT_SET = ['BIND_eyelidUp_01_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_02_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_03_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_04_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_05_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_06_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_07_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_08_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_09_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_10_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_11_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_12_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_13_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_14_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_15_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_16_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_17_JNT'+LEFTRIGHT,]\n    \n    # define lower eyelid joints from left to right, not including side joints\n    downEyelid_LEFTRIGHT_SET = ['BIND_eyelidDown_01_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_02_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_03_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_04_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_05_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_06_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_07_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_08_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_09_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_10_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_11_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_12_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_13_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_14_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_15_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_16_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_17_JNT'+LEFTRIGHT]\n    \n    \n    eyeCenter = 'BIND_eyeball_JNT'+LEFTRIGHT\n    allBndJnts = [ML_LEFTRIGHT_SET] + [MR_LEFTRIGHT_SET] + upEyelid_LEFTRIGHT_SET + downEyelid_LEFTRIGHT_SET\n    \n    # make up vector for aim constraints\n    worldUpObject = mc.spaceLocator(n='eyeUpVec_LOC'+LEFTRIGHT)[0]\n    pos = mc.xform(eyeCenter,ws=1,t=True,q=True)\n    posX = pos[0]\n    posY = pos[1] + 2\n    posZ = pos[2]\n    mc.xform(worldUpObject,ws=True,t=[posX,posY,posZ])\n    \n    allTrgJnts = []\n    allCJnts = []\n    allLocs = []\n    \n    for bndJnt in allBndJnts:\n        mc.select(cl=True)\n        \n        # make and place central trg joints\n        trgJntC = mc.joint(n = bndJnt.replace('BIND_','TRG_C_'))\n        allCJnts.append(trgJntC)\n        mc.setAttr(trgJntC + '.radius', 0.4)\n        \n        pos = mc.xform(eyeCenter,q=1,ws=1,t=1)\n        mc.xform(trgJntC,ws=1,t=pos)\n        \n        # make and place eyelid trg joints\n        trgJnt = mc.joint(n = bndJnt.replace('BIND_','TRG_'))\n        allTrgJnts.append(trgJnt)\n        mc.setAttr(trgJnt + '.radius', 0.4)\n        \n        pos = mc.xform(bndJnt,q=1,ws=1,t=1)\n        mc.xform(trgJnt,ws=1,t=pos)\n        \n        mc.joint(trgJntC,e=True,oj='xyz',secondaryAxisOrient='yup',ch=True,zso=True)\n    \n    \n        # make and place locators on each eyelid jnt\n        loc = mc.spaceLocator(n = bndJnt.replace('JNT','LOC').replace('BIND_',''))[0]\n        allLocs.append(loc)\n        pos = mc.xform(bndJnt, q=True,ws=True,t=True)\n        mc.xform(loc, ws=True, t=pos)\n        \n        # aim constrain the central trg joints to the locators\n        mc.select(loc,trgJntC)\n        mc.aimConstraint(mo=True,weight=1,aimVector=[0,0,1],upVector=[0,1,0],worldUpType='object',worldUpObject=worldUpObject)\n        locShp = mc.listRelatives(loc,s=True)[0]\n        mc.setAttr(locShp+'.localScaleX',.1)\n        mc.setAttr(locShp+'.localScaleY',.1)\n        mc.setAttr(locShp+'.localScaleZ',.1)\n        \n        # parent constrain the BIND jnts to the TRG jnts\n        mc.parentConstraint(trgJnt,bndJnt,mo=True)\n    \n    \n    def getUParam( pnt = [], crv = None):\n    \n        point = OpenMaya.MPoint(pnt[0],pnt[1],pnt[2])\n        curveFn = OpenMaya.MFnNurbsCurve(getDagPath(crv))\n        paramUtill=OpenMaya.MScriptUtil()\n        paramPtr=paramUtill.asDoublePtr()\n        isOnCurve = curveFn.isPointOnCurve(point)\n        if isOnCurve == True:\n            \n            curveFn.getParamAtPoint(point , paramPtr,0.001,OpenMaya.MSpace.kObject )\n        else :\n            point = curveFn.closestPoint(point,paramPtr,0.001,OpenMaya.MSpace.kObject)\n            curveFn.getParamAtPoint(point , paramPtr,0.001,OpenMaya.MSpace.kObject )\n        \n        param = paramUtill.getDouble(paramPtr)  \n        return param\n    \n    def getDagPath( objectName):\n        \n        if isinstance(objectName, list)==True:\n            oNodeList=[]\n            for o in objectName:\n                selectionList = OpenMaya.MSelectionList()\n                selectionList.add(o)\n                oNode = OpenMaya.MDagPath()\n                selectionList.getDagPath(0, oNode)\n                oNodeList.append(oNode)\n            return oNodeList\n        else:\n            selectionList = OpenMaya.MSelectionList()\n            selectionList.add(objectName)\n            oNode = OpenMaya.MDagPath()\n            selectionList.getDagPath(0, oNode)\n            return oNode\n    \n    \n    topHalfJnts = [ML_LEFTRIGHT_SET] + upEyelid_LEFTRIGHT_SET + [MR_LEFTRIGHT_SET]\n    bottomHalfJnts = [ML_LEFTRIGHT_SET] + downEyelid_LEFTRIGHT_SET + [MR_LEFTRIGHT_SET]\n    \n    allCurves = []\n    \n    posOrder = []\n    \n    # make and connect locs to top half curve\n    for jnt in topHalfJnts:\n        pos = mc.xform(jnt, ws=True,q=True,t=True)\n        posOrder.append(pos)\n    \n    crv = cmds.curve(p=posOrder,degree=1,n='HDup_CRV'+LEFTRIGHT)\n    allCurves.append(crv)\n    crv = mc.listRelatives(s=True)[0]\n    \n    topHalfLocs = []\n    for jnt in topHalfJnts:\n        topHalfLocs.append(jnt.replace('JNT','LOC').replace('BIND_',''))\n    \n    for loc in topHalfLocs:\n        pos = cmds.xform(loc,q=1,ws=1,t=1)\n        u = getUParam(pos,crv)\n        name = loc.replace(\"_LOC\",\"_PCI\")\n        pci = cmds.createNode(\"pointOnCurveInfo\",n=name)\n        cmds.connectAttr(crv+'.worldSpace',pci+'.inputCurve')\n        cmds.setAttr(pci+'.parameter',u)\n        cmds.connectAttr(pci+'.position',loc+'.t')\n    \n    # make and connect locs to bottom half curve\n    posOrder = []\n    \n    for jnt in bottomHalfJnts:\n        pos = mc.xform(jnt, ws=True,q=True,t=True)\n        posOrder.append(pos)\n    \n    crv = cmds.curve(p=posOrder,degree=1,n='HDdown_CRV'+LEFTRIGHT)\n    allCurves.append(crv)\n    crv = mc.listRelatives(s=True)[0]\n    \n    bottomHalfLocs = []\n    for jnt in bottomHalfJnts:\n        bottomHalfLocs.append(jnt.replace('JNT','LOC').replace('BIND_',''))\n    \n    bottomHalfLocs.remove(ML_LEFTRIGHT_SET.replace('JNT','LOC').replace('BIND_','')) \n    bottomHalfLocs.remove(MR_LEFTRIGHT_SET.replace('JNT','LOC').replace('BIND_','')) \n    \n    for loc in bottomHalfLocs:\n        pos = cmds.xform(loc,q=1,ws=1,t=1)\n        u = getUParam(pos,crv)\n        name = loc.replace(\"_LOC\",\"_PCI\")\n        pci = cmds.createNode(\"pointOnCurveInfo\",n=name)\n        cmds.connectAttr(crv+'.worldSpace',pci+'.inputCurve')\n        cmds.setAttr(pci+'.parameter',u)\n        cmds.connectAttr(pci+'.position',loc+'.t')\n    \n    # make macro ctrl joints for the upper lid\n    \n    ctlL = 'ML_Eyelid_LOC'+LEFTRIGHT\n    ctlR = 'MR_Eyelid_LOC'+LEFTRIGHT\n    ctlUpL = top3Bottom3ControlJoints[0].replace('BIND_','').replace('JNT','LOC')\n    ctlUpM = top3Bottom3ControlJoints[1].replace('BIND_','').replace('JNT','LOC')\n    ctlUpR = top3Bottom3ControlJoints[2].replace('BIND_','').replace('JNT','LOC')\n    ctlDownL = top3Bottom3ControlJoints[3].replace('BIND_','').replace('JNT','LOC')\n    ctlDownM = top3Bottom3ControlJoints[4].replace('BIND_','').replace('JNT','LOC')\n    ctlDownR = top3Bottom3ControlJoints[5].replace('BIND_','').replace('JNT','LOC')\n    \n    \n    LDupPts = [ctlL,ctlUpL,ctlUpM,ctlUpR,ctlR]\n    \n    posOrder = []\n    for loc in LDupPts:\n        mc.select(cl=True)\n        pos = mc.xform(loc, ws=True,q=True,t=True)\n        posOrder.append(pos)\n        jnt = mc.joint(n=loc.replace('LOC','CTJT'),p=pos)\n        mc.setAttr(jnt+'.radius',.6)\n    \n    crv = cmds.curve(p=posOrder,degree=3,n='LDup_CRV'+LEFTRIGHT) # draw the curve between locators\n    allCurves.append(crv)\n    crv = mc.listRelatives(s=True)[0]\n    \n    # make macro ctrl joints for the lower lid\n    LDdownPts = [ctlL,ctlDownL,ctlDownM,ctlDownR,ctlR]\n    \n    \n    posOrder = []\n    for loc in LDdownPts:\n        mc.select(cl=True)\n        pos = mc.xform(loc, ws=True,q=True,t=True)\n        posOrder.append(pos)\n        if loc.replace('LOC','CTJT') not in mc.ls(transforms=True):\n            jnt = mc.joint(n=loc.replace('LOC','CTJT'),p=pos)\n        mc.setAttr(jnt+'.radius',.6)\n    \n    crv = cmds.curve(p=posOrder,degree=3,n='LDdown_CRV'+LEFTRIGHT) # draw the curve between locators\n    allCurves.append(crv)\n    crv = mc.listRelatives(s=True)[0]\n    \n    LDdownNoDups = LDdownPts\n    LDdownNoDups.remove('ML_Eyelid_LOC'+LEFTRIGHT)\n    LDdownNoDups.remove('MR_Eyelid_LOC'+LEFTRIGHT)\n    noDupsList = LDupPts + LDdownNoDups\n    ctlJnts = []\n    for jnt in noDupsList:\n        ctlJnts.append(jnt.replace('LOC','CTJT'))\n    \n    \n    # make nurbs circle controls on control joints\n    ctlOffsetGrps = []\n    x=0\n    ctls = []\n    for jnt in ctlJnts:\n        ctl = mc.circle(n=ctlJnts[x].replace('CTJT','CTRL'),r=.3)[0]\n        ctls.append(ctl)\n        mc.matchTransform(ctl, ctlJnts[x])\n        mc.select(ctl)\n        setCtrlColor('yellow')\n        mc.delete(constructionHistory=True)\n        mc.makeIdentity(ctl,a=True)\n        ctlOffsetGrps.append(createOffsetGrp()[0])\n        mc.parentConstraint(ctl,ctlJnts[x])\n        mc.select(ctl+'.cv[0:8]')\n        mc.move(0,0,1,r=True)\n        mc.select(cl=True)\n        x+=1\n    \n    ctlL = 'ML_Eyelid_CTRL'+LEFTRIGHT\n    ctlR = 'MR_Eyelid_CTRL'+LEFTRIGHT\n    ctlUpL = top3Bottom3ControlJoints[0].replace('BIND_','').replace('JNT','CTRL')\n    ctlUpM = top3Bottom3ControlJoints[1].replace('BIND_','').replace('JNT','CTRL')\n    ctlUpR = top3Bottom3ControlJoints[2].replace('BIND_','').replace('JNT','CTRL')\n    ctlDownL = top3Bottom3ControlJoints[3].replace('BIND_','').replace('JNT','CTRL')\n    ctlDownM = top3Bottom3ControlJoints[4].replace('BIND_','').replace('JNT','CTRL')\n    ctlDownR = top3Bottom3ControlJoints[5].replace('BIND_','').replace('JNT','CTRL')\n     \n    mc.select(ctlUpL,ctlUpR,ctlDownL,ctlDownR)\n    lockUnlockChannels(lock=True,channels=['R','S'])\n    if LEFTRIGHT == '_L':\n        setCtrlColor('blue')\n    else:\n        setCtrlColor('red')\n    \n    for myCtl in [ctlUpL,ctlUpR,ctlDownL,ctlDownR]:\n        mc.select(myCtl+'.cv[0:8]')\n        mc.scale(.6,.6,1,r=True,os=True)\n    \n    mc.select(ctlL,ctlR,ctlUpM,ctlDownM)\n    lockUnlockChannels(lock=True,channels=['S'])\n    \n    # point constrain the in-between ctrls to follow the top,bottom,left,right controls\n    mc.parentConstraint(ctlL,ctlUpM,ctlUpL+'_offset',mo=True)\n    mc.parentConstraint(ctlR,ctlUpM,ctlUpR+'_offset',mo=True)\n    mc.parentConstraint(ctlL,ctlDownM,ctlDownL+'_offset',mo=True)\n    mc.parentConstraint(ctlR,ctlDownM,ctlDownR+'_offset',mo=True)\n    \n    # group everything generated by this script\n    allCurvesGrp = mc.group(allCurves,n='GRP_eyelid_CRVs'+LEFTRIGHT)\n    ctlJntsGrp = mc.group(ctlJnts,n='GRP_eyelid_CTJTs'+LEFTRIGHT)\n    ctlOffsetGrpsGrp = mc.group(ctlOffsetGrps,n='GRP_eyelid_CTRLs'+LEFTRIGHT)\n    allCJntsGrp = mc.group(allCJnts,n='GRP_eyelid_TRG_jnts'+LEFTRIGHT)\n    allLocsGrp = mc.group(allLocs,n='GRP_eyelid_LOCs'+LEFTRIGHT)\n    masterEyelidGrp = mc.group(worldUpObject,allCurvesGrp,ctlJntsGrp,ctlOffsetGrpsGrp,allCJntsGrp,allLocsGrp,n='GRP_eyelid'+LEFTRIGHT)\n    mc.select(masterEyelidGrp,eyeCenter)\n    mc.matchTransform(piv=True)\n    \n    mc.hide(ctlJntsGrp,allCJntsGrp,allLocsGrp,worldUpObject)\n    \n    #-------------------PAUSE HERE and make the LD curves match the HD curves better (by moving CVs on LD curves)\n    #----------------------------P  A  R  T  2-----------------------------\n    \n    import maya.cmds as mc\n    import maya.mel as mel\n    \n    #LEFTRIGHT='_L'\n    \n    upWire = mel.eval(\"wire -gw false -en 1.000000 -ce 0.000000 -li 0.000000 -w LDup_CRV\"+LEFTRIGHT+\" HDup_CRV\"+LEFTRIGHT+\";\")[0]\n    upWire = mc.rename(upWire,'LtoHup_wire'+LEFTRIGHT)\n    mc.setAttr(upWire+'.scale[0]',0)\n    mc.setAttr(upWire+'.dropoffDistance[0]',1000000000)\n    \n    downWire = mel.eval(\"wire -gw false -en 1.000000 -ce 0.000000 -li 0.000000 -w LDdown_CRV\"+LEFTRIGHT+\" HDdown_CRV\"+LEFTRIGHT+\";\")[0]\n    downWire = mc.rename(downWire,'LtoHdown_wire'+LEFTRIGHT)\n    mc.setAttr(downWire+'.scale[0]',0)\n    mc.setAttr(downWire+'.dropoffDistance[0]',1000000000)\n    \n    ctlJnts = ['ML_Eyelid_CTJT'+LEFTRIGHT,\n    'eyelidUp_04_CTJT'+LEFTRIGHT,\n    'eyelidUp_08_CTJT'+LEFTRIGHT,\n    'eyelidUp_12_CTJT'+LEFTRIGHT,\n    'MR_Eyelid_CTJT'+LEFTRIGHT,\n    'eyelidDown_04_CTJT'+LEFTRIGHT,\n    'eyelidDown_08_CTJT'+LEFTRIGHT,\n    'eyelidDown_12_CTJT'+LEFTRIGHT]\n    \n    mc.select(ctlJnts,'LDup_CRV'+LEFTRIGHT,'LDdown_CRV'+LEFTRIGHT)\n    mel.eval('newSkinCluster \"-toSelectedBones -bindMethod 0  -normalizeWeights 1 -weightDistribution 0 -mi 1  -dr 4 -rui false  , multipleBindPose, 0\";')\n    \n    mc.hide('GRP_eyelid_CRVs'+LEFTRIGHT)\n    \n    #----------------------------P  A  R  T  3-----------------------------\n    import maya.cmds as mc\n    import maya.mel as mel\n    \n    #LEFTRIGHT='_L'\n    \n    if LEFTRIGHT == '_L':\n        eyeCtrl = 'eye_CTRL_L'\n    else:\n        eyeCtrl = 'eye_CTRL_R'\n    \n    \n    LDblink = mc.duplicate('LDup_CRV'+LEFTRIGHT,n='LDblink_CRV'+LEFTRIGHT)[0]\n    mc.select('LDup_CRV'+LEFTRIGHT,'LDdown_CRV'+LEFTRIGHT,LDblink)\n    LDbs = mc.blendShape(n=\"LDblink_BS\"+LEFTRIGHT, before=True)[0]\n    \n    mc.addAttr(eyeCtrl,longName='blinkHeight',at='double',k=True,min=0,max=1)\n    \n    revNode = mc.createNode('reverse',n=LDbs.replace('_BS','_reverse'))\n    \n    mc.connectAttr(eyeCtrl+'.blinkHeight',revNode+'.inputX',f=True)\n    mc.connectAttr(revNode+'.outputX',LDbs+'.weight[1]',f=True)\n    mc.connectAttr(eyeCtrl+'.blinkHeight',LDbs+'.weight[0]',f=True)\n    \n    HDupBlink = mc.duplicate('HDup_CRV'+LEFTRIGHT,n='HDupBlink_CRV'+LEFTRIGHT)[0]\n    HDdownBlink = mc.duplicate('HDdown_CRV'+LEFTRIGHT,n='HDdownBlink_CRV'+LEFTRIGHT)[0]\n    \n    mc.setAttr(eyeCtrl+'.blinkHeight',1)\n    HDupWire = mel.eval(\"wire -gw false -en 1.000000 -ce 0.000000 -li 0.000000 -w \"+LDblink+\" \"+HDupBlink+\";\")[0]\n    HDupWire = mc.rename(HDupWire,'blinkToHDup_wire'+LEFTRIGHT)\n    mc.setAttr(HDupWire+'.scale[0]',0)\n    mc.setAttr(HDupWire+'.dropoffDistance[0]',1000000000)\n    \n    mc.setAttr(eyeCtrl+'.blinkHeight',0)\n    HDdownWire = mel.eval(\"wire -gw false -en 1.000000 -ce 0.000000 -li 0.000000 -w \"+LDblink+\" \"+HDdownBlink+\";\")[0]\n    HDdownWire = mc.rename(HDdownWire,'blinkToHDdown_wire'+LEFTRIGHT)\n    mc.setAttr(HDdownWire+'.scale[0]',0)\n    mc.setAttr(HDdownWire+'.dropoffDistance[0]',1000000000)\n    \n    \n    mc.select(HDupBlink,'HDup_CRV'+LEFTRIGHT)\n    HDupBs = mc.blendShape(n=\"HDupBlink_BS\"+LEFTRIGHT, before=True)[0]\n    \n    mc.select(HDdownBlink,'HDdown_CRV'+LEFTRIGHT)\n    HDdownBs = mc.blendShape(n=\"HDdownBlink_BS\"+LEFTRIGHT, before=True)[0]\n    \n    \n    mc.addAttr(eyeCtrl,longName='smartBlink',at='double',k=True,min=0,max=1)\n    mc.connectAttr(eyeCtrl+'.smartBlink',HDupBs+'.weight[0]')\n    mc.connectAttr(eyeCtrl+'.smartBlink',HDdownBs+'.weight[0]')\n    \n    \n    noInheritTransformList = ['LDup_CRV'+LEFTRIGHT,\n                              'LDdown_CRV'+LEFTRIGHT,\n                              'LDblink_CRV'+LEFTRIGHT,\n                              'GRP_eyelid_LOCs'+LEFTRIGHT]\n    \n    for thing in noInheritTransformList:\n        mc.setAttr(thing+'.inheritsTransform', False)\n                              \n                              \n    mc.select('BIND_invJaw_JNT','BIND_eyeball_JNT'+LEFTRIGHT,'GRP_eyelid'+LEFTRIGHT)\n    fleshyPc = mc.parentConstraint(mo=True)[0]\n    fleshyPcTargets = mc.parentConstraint(fleshyPc,weightAliasList=True,q=True)\n    mc.addAttr(eyeCtrl,longName='fleshyLids',at='double',k=True,min=0,max=1)\n    \n    fleshyRev = mc.createNode('reverse',n='fleshyLids_reverse'+LEFTRIGHT)\n    mc.connectAttr(eyeCtrl+'.fleshyLids',fleshyRev+'.inputX',f=True)\n    mc.connectAttr(fleshyRev+'.outputX',fleshyPc+'.'+fleshyPcTargets[0],f=True)\n    mc.connectAttr(eyeCtrl+'.fleshyLids',fleshyPc+'.'+fleshyPcTargets[1],f=True)\n    \n    mc.setAttr(eyeCtrl+'.fleshyLids',0.05)\n    mc.setAttr(eyeCtrl+'.blinkHeight',0.15)\n    \n    mc.select('GRP_eyelid'+LEFTRIGHT)\n    #lockUnlockChannels(breakConnections=True,channels=['ry'])\n\neyelidGrp = mc.group(['GRP_eyelid_L','GRP_eyelid_R'],n='GRP_eyelids')\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "'''\nINSTRUCTIONS:\nRun script on given auto-built skeleton using ..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "eyelidRig" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "'''\nINSTRUCTIONS:\nRun script on given auto-built skeleton using autoSkeletonBuilder.py\nChange the LEFTRIGHT variable to '_R' and re-run for the right eyelid rig\n'''\n\nimport maya.cmds as mc\n\n#LEFTRIGHT='_L'\n\nans = mc.confirmDialog(title = 'Auto-Eye Rigger',\n                       message = 'This will rig eyes and eyelids of our auto-built skeleton. Proceed if you dare...',\n                       button = ['Proceed','Cancel'])\n\ntry:\n    testIfOurFunctionsImported()\nexcept:\n    mc.error('You need to import ourRiggingFunctions first')\n\nif ans == 'Proceed':\n    print('User dares to proceed')\nelse:\n    mc.error('Canceled by user')\n\n#----------------------------P  A  R  T  0----------------------------------\n\nif 'eye_CTRL_L' not in mc.ls(transforms=True):\n    Leye_jnt = 'BIND_eyeball_JNT_L'\n    Reye_jnt = 'BIND_eyeball_JNT_R'\n    \n    import maya.cmds as mc\n    \n    #create L eye ctrl and position it\n    mc.select(cl=True)\n    Leye_ctrl = mc.circle(n='eye_CTRL_L',r=2.5)[0]\n    mc.delete(ch=True)\n    \n    mc.select(Leye_ctrl,Leye_jnt)\n    mc.matchTransform()\n    \n    #create R eye ctrl and position it\n    mc.select(cl=True)\n    Reye_ctrl = mc.circle(n='eye_CTRL_R',r=2.5)[0]\n    mc.delete(ch=True)\n    \n    mc.select(Reye_ctrl,Reye_jnt)\n    mc.matchTransform()\n    \n    #freeze all transforms on L and R eye controls\n    mc.select(Leye_ctrl,Reye_ctrl)\n    mc.move(0,0,20,r=True)\n    mc.makeIdentity(apply=True)\n    LReyeOffsGrps = createOffsetGrp()\n    \n    #create and position main eye control\n    mainEye_ctrl = mc.circle(n='eyesMaster_CTRL',r=10)[0]\n    mc.delete(ch=True)\n    mc.select(mainEye_ctrl,Leye_jnt)\n    mc.matchTransform(pos=True)\n    mc.setAttr(mainEye_ctrl+'.tx',0)\n    mc.select(mainEye_ctrl)\n    mc.move(0,0,20,r=True)\n    mainEyeOffsGrp = createOffsetGrp()\n    \n    mc.parent(LReyeOffsGrps,mainEye_ctrl)\n    \n    #freeze all transforms\n    mc.select(mainEyeOffsGrp,hierarchy=True)\n    mc.makeIdentity(apply=True)\n    \n    #bind each eye geo to corrosponding joint\n    #mc.select(Leye,Leye_jnt)\n    #mc.skinCluster(toSelectedBones=True)\n    \n    #mc.select(Reye,Reye_jnt)\n    #mc.skinCluster(toSelectedBones=True)\n    \n    #aim constrain eye joints to eye controls\n    mc.select(Leye_ctrl,Leye_jnt)\n    mc.aimConstraint(aimVector=(0, 0, 1), upVector=(0, 1, 0), worldUpType=\"vector\", worldUpVector=(0, 1, 0))\n    \n    mc.select(Reye_ctrl,Reye_jnt)\n    mc.aimConstraint(aimVector=(0, 0, 1), upVector=(0, 1, 0), worldUpType=\"vector\", worldUpVector=(0, 1, 0))\n    \n    #create locator in the center of eye joints (for main ctrl off grp aim constraint)\n    eyesCenterLoc = mc.spaceLocator(n='eyesCenter_LOC')\n    mc.move(0,mc.xform(Leye_jnt,q=True,t=True,ws=True)[1],mc.xform(Leye_jnt,q=True,t=True,ws=True)[2])\n    \n    mc.select(eyesCenterLoc,mainEye_ctrl)\n    mc.aimConstraint(aimVector=(0, 0, -1), upVector=(0, 1, 0), worldUpType=\"vector\", worldUpVector=(0, 1, 0))\n    \n    #create master group for eye rig\n    mc.select(mainEyeOffsGrp,eyesCenterLoc)\n    mc.group(name='GRP_eyes')\n    mc.select(mainEye_ctrl)\n    \n    #change controls color\n    mc.select(Leye_ctrl)\n    setCtrlColor('blue')\n    mc.select(Reye_ctrl)\n    setCtrlColor('red')\n    mc.select(mainEye_ctrl)\n    setCtrlColor('yellow')\n    \n    #lock r, s channels on ctrls\n    mc.select(mainEye_ctrl,Leye_ctrl,Reye_ctrl)\n    lockUnlockChannels(lock=True,channels=['R','S'])\n    \n    mc.parentConstraint('BIND_invJaw_JNT',mainEyeOffsGrp,mo=True)\n    mc.hide('eyesCenter_LOC')\n    \n    mc.select(cl=True)\n\n\n#----------------------------P  A  R  T  1----------------------------------\n\nfor lrVar in ['_L','_R']:\n    LEFTRIGHT = lrVar\n    from maya import cmds as mc, OpenMaya\n    \n    #top3Bottom3ControlJoints = mc.ls(sl=True)\n    top3Bottom3ControlJoints = ['BIND_eyelidUp_04_JNT'+LEFTRIGHT,\n                                'BIND_eyelidUp_08_JNT'+LEFTRIGHT,\n                                'BIND_eyelidUp_12_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_04_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_08_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_12_JNT'+LEFTRIGHT]\n    \n    # define side of eye joints\n    ML_LEFTRIGHT_SET = 'BIND_ML_Eyelid_JNT'+LEFTRIGHT\n    MR_LEFTRIGHT_SET = 'BIND_MR_Eyelid_JNT'+LEFTRIGHT\n    \n    # define upper eyelid joints from left to right not including side joints\n    upEyelid_LEFTRIGHT_SET = ['BIND_eyelidUp_01_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_02_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_03_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_04_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_05_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_06_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_07_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_08_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_09_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_10_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_11_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_12_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_13_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_14_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_15_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_16_JNT'+LEFTRIGHT,\n                              'BIND_eyelidUp_17_JNT'+LEFTRIGHT,]\n    \n    # define lower eyelid joints from left to right, not including side joints\n    downEyelid_LEFTRIGHT_SET = ['BIND_eyelidDown_01_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_02_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_03_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_04_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_05_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_06_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_07_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_08_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_09_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_10_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_11_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_12_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_13_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_14_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_15_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_16_JNT'+LEFTRIGHT,\n                                'BIND_eyelidDown_17_JNT'+LEFTRIGHT]\n    \n    \n    eyeCenter = 'BIND_eyeball_JNT'+LEFTRIGHT\n    allBndJnts = [ML_LEFTRIGHT_SET] + [MR_LEFTRIGHT_SET] + upEyelid_LEFTRIGHT_SET + downEyelid_LEFTRIGHT_SET\n    \n    # make up vector for aim constraints\n    worldUpObject = mc.spaceLocator(n='eyeUpVec_LOC'+LEFTRIGHT)[0]\n    pos = mc.xform(eyeCenter,ws=1,t=True,q=True)\n    posX = pos[0]\n    posY = pos[1] + 2\n    posZ = pos[2]\n    mc.xform(worldUpObject,ws=True,t=[posX,posY,posZ])\n    \n    allTrgJnts = []\n    allCJnts = []\n    allLocs = []\n    \n    for bndJnt in allBndJnts:\n        mc.select(cl=True)\n        \n        # make and place central trg joints\n        trgJntC = mc.joint(n = bndJnt.replace('BIND_','TRG_C_'))\n        allCJnts.append(trgJntC)\n        mc.setAttr(trgJntC + '.radius', 0.4)\n        \n        pos = mc.xform(eyeCenter,q=1,ws=1,t=1)\n        mc.xform(trgJntC,ws=1,t=pos)\n        \n        # make and place eyelid trg joints\n        trgJnt = mc.joint(n = bndJnt.replace('BIND_','TRG_'))\n        allTrgJnts.append(trgJnt)\n        mc.setAttr(trgJnt + '.radius', 0.4)\n        \n        pos = mc.xform(bndJnt,q=1,ws=1,t=1)\n        mc.xform(trgJnt,ws=1,t=pos)\n        \n        mc.joint(trgJntC,e=True,oj='xyz',secondaryAxisOrient='yup',ch=True,zso=True)\n    \n    \n        # make and place locators on each eyelid jnt\n        loc = mc.spaceLocator(n = bndJnt.replace('JNT','LOC').replace('BIND_',''))[0]\n        allLocs.append(loc)\n        pos = mc.xform(bndJnt, q=True,ws=True,t=True)\n        mc.xform(loc, ws=True, t=pos)\n        \n        # aim constrain the central trg joints to the locators\n        mc.select(loc,trgJntC)\n        mc.aimConstraint(mo=True,weight=1,aimVector=[0,0,1],upVector=[0,1,0],worldUpType='object',worldUpObject=worldUpObject)\n        locShp = mc.listRelatives(loc,s=True)[0]\n        mc.setAttr(locShp+'.localScaleX',.1)\n        mc.setAttr(locShp+'.localScaleY',.1)\n        mc.setAttr(locShp+'.localScaleZ',.1)\n        \n        # parent constrain the BIND jnts to the TRG jnts\n        mc.parentConstraint(trgJnt,bndJnt,mo=True)\n    \n    \n    def getUParam( pnt = [], crv = None):\n    \n        point = OpenMaya.MPoint(pnt[0],pnt[1],pnt[2])\n        curveFn = OpenMaya.MFnNurbsCurve(getDagPath(crv))\n        paramUtill=OpenMaya.MScriptUtil()\n        paramPtr=paramUtill.asDoublePtr()\n        isOnCurve = curveFn.isPointOnCurve(point)\n        if isOnCurve == True:\n            \n            curveFn.getParamAtPoint(point , paramPtr,0.001,OpenMaya.MSpace.kObject )\n        else :\n            point = curveFn.closestPoint(point,paramPtr,0.001,OpenMaya.MSpace.kObject)\n            curveFn.getParamAtPoint(point , paramPtr,0.001,OpenMaya.MSpace.kObject )\n        \n        param = paramUtill.getDouble(paramPtr)  \n        return param\n    \n    def getDagPath( objectName):\n        \n        if isinstance(objectName, list)==True:\n            oNodeList=[]\n            for o in objectName:\n                selectionList = OpenMaya.MSelectionList()\n                selectionList.add(o)\n                oNode = OpenMaya.MDagPath()\n                selectionList.getDagPath(0, oNode)\n                oNodeList.append(oNode)\n            return oNodeList\n        else:\n            selectionList = OpenMaya.MSelectionList()\n            selectionList.add(objectName)\n            oNode = OpenMaya.MDagPath()\n            selectionList.getDagPath(0, oNode)\n            return oNode\n    \n    \n    topHalfJnts = [ML_LEFTRIGHT_SET] + upEyelid_LEFTRIGHT_SET + [MR_LEFTRIGHT_SET]\n    bottomHalfJnts = [ML_LEFTRIGHT_SET] + downEyelid_LEFTRIGHT_SET + [MR_LEFTRIGHT_SET]\n    \n    allCurves = []\n    \n    posOrder = []\n    \n    # make and connect locs to top half curve\n    for jnt in topHalfJnts:\n        pos = mc.xform(jnt, ws=True,q=True,t=True)\n        posOrder.append(pos)\n    \n    crv = cmds.curve(p=posOrder,degree=1,n='HDup_CRV'+LEFTRIGHT)\n    allCurves.append(crv)\n    crv = mc.listRelatives(s=True)[0]\n    \n    topHalfLocs = []\n    for jnt in topHalfJnts:\n        topHalfLocs.append(jnt.replace('JNT','LOC').replace('BIND_',''))\n    \n    for loc in topHalfLocs:\n        pos = cmds.xform(loc,q=1,ws=1,t=1)\n        u = getUParam(pos,crv)\n        name = loc.replace(\"_LOC\",\"_PCI\")\n        pci = cmds.createNode(\"pointOnCurveInfo\",n=name)\n        cmds.connectAttr(crv+'.worldSpace',pci+'.inputCurve')\n        cmds.setAttr(pci+'.parameter',u)\n        cmds.connectAttr(pci+'.position',loc+'.t')\n    \n    # make and connect locs to bottom half curve\n    posOrder = []\n    \n    for jnt in bottomHalfJnts:\n        pos = mc.xform(jnt, ws=True,q=True,t=True)\n        posOrder.append(pos)\n    \n    crv = cmds.curve(p=posOrder,degree=1,n='HDdown_CRV'+LEFTRIGHT)\n    allCurves.append(crv)\n    crv = mc.listRelatives(s=True)[0]\n    \n    bottomHalfLocs = []\n    for jnt in bottomHalfJnts:\n        bottomHalfLocs.append(jnt.replace('JNT','LOC').replace('BIND_',''))\n    \n    bottomHalfLocs.remove(ML_LEFTRIGHT_SET.replace('JNT','LOC').replace('BIND_','')) \n    bottomHalfLocs.remove(MR_LEFTRIGHT_SET.replace('JNT','LOC').replace('BIND_','')) \n    \n    for loc in bottomHalfLocs:\n        pos = cmds.xform(loc,q=1,ws=1,t=1)\n        u = getUParam(pos,crv)\n        name = loc.replace(\"_LOC\",\"_PCI\")\n        pci = cmds.createNode(\"pointOnCurveInfo\",n=name)\n        cmds.connectAttr(crv+'.worldSpace',pci+'.inputCurve')\n        cmds.setAttr(pci+'.parameter',u)\n        cmds.connectAttr(pci+'.position',loc+'.t')\n    \n    # make macro ctrl joints for the upper lid\n    \n    ctlL = 'ML_Eyelid_LOC'+LEFTRIGHT\n    ctlR = 'MR_Eyelid_LOC'+LEFTRIGHT\n    ctlUpL = top3Bottom3ControlJoints[0].replace('BIND_','').replace('JNT','LOC')\n    ctlUpM = top3Bottom3ControlJoints[1].replace('BIND_','').replace('JNT','LOC')\n    ctlUpR = top3Bottom3ControlJoints[2].replace('BIND_','').replace('JNT','LOC')\n    ctlDownL = top3Bottom3ControlJoints[3].replace('BIND_','').replace('JNT','LOC')\n    ctlDownM = top3Bottom3ControlJoints[4].replace('BIND_','').replace('JNT','LOC')\n    ctlDownR = top3Bottom3ControlJoints[5].replace('BIND_','').replace('JNT','LOC')\n    \n    \n    LDupPts = [ctlL,ctlUpL,ctlUpM,ctlUpR,ctlR]\n    \n    posOrder = []\n    for loc in LDupPts:\n        mc.select(cl=True)\n        pos = mc.xform(loc, ws=True,q=True,t=True)\n        posOrder.append(pos)\n        jnt = mc.joint(n=loc.replace('LOC','CTJT'),p=pos)\n        mc.setAttr(jnt+'.radius',.6)\n    \n    crv = cmds.curve(p=posOrder,degree=3,n='LDup_CRV'+LEFTRIGHT) # draw the curve between locators\n    allCurves.append(crv)\n    crv = mc.listRelatives(s=True)[0]\n    \n    # make macro ctrl joints for the lower lid\n    LDdownPts = [ctlL,ctlDownL,ctlDownM,ctlDownR,ctlR]\n    \n    \n    posOrder = []\n    for loc in LDdownPts:\n        mc.select(cl=True)\n        pos = mc.xform(loc, ws=True,q=True,t=True)\n        posOrder.append(pos)\n        if loc.replace('LOC','CTJT') not in mc.ls(transforms=True):\n            jnt = mc.joint(n=loc.replace('LOC','CTJT'),p=pos)\n        mc.setAttr(jnt+'.radius',.6)\n    \n    crv = cmds.curve(p=posOrder,degree=3,n='LDdown_CRV'+LEFTRIGHT) # draw the curve between locators\n    allCurves.append(crv)\n    crv = mc.listRelatives(s=True)[0]\n    \n    LDdownNoDups = LDdownPts\n    LDdownNoDups.remove('ML_Eyelid_LOC'+LEFTRIGHT)\n    LDdownNoDups.remove('MR_Eyelid_LOC'+LEFTRIGHT)\n    noDupsList = LDupPts + LDdownNoDups\n    ctlJnts = []\n    for jnt in noDupsList:\n        ctlJnts.append(jnt.replace('LOC','CTJT'))\n    \n    \n    # make nurbs circle controls on control joints\n    ctlOffsetGrps = []\n    x=0\n    ctls = []\n    for jnt in ctlJnts:\n        ctl = mc.circle(n=ctlJnts[x].replace('CTJT','CTRL'),r=.3)[0]\n        ctls.append(ctl)\n        mc.matchTransform(ctl, ctlJnts[x])\n        mc.select(ctl)\n        setCtrlColor('yellow')\n        mc.delete(constructionHistory=True)\n        mc.makeIdentity(ctl,a=True)\n        ctlOffsetGrps.append(createOffsetGrp()[0])\n        mc.parentConstraint(ctl,ctlJnts[x])\n        mc.select(ctl+'.cv[0:8]')\n        mc.move(0,0,1,r=True)\n        mc.select(cl=True)\n        x+=1\n    \n    ctlL = 'ML_Eyelid_CTRL'+LEFTRIGHT\n    ctlR = 'MR_Eyelid_CTRL'+LEFTRIGHT\n    ctlUpL = top3Bottom3ControlJoints[0].replace('BIND_','').replace('JNT','CTRL')\n    ctlUpM = top3Bottom3ControlJoints[1].replace('BIND_','').replace('JNT','CTRL')\n    ctlUpR = top3Bottom3ControlJoints[2].replace('BIND_','').replace('JNT','CTRL')\n    ctlDownL = top3Bottom3ControlJoints[3].replace('BIND_','').replace('JNT','CTRL')\n    ctlDownM = top3Bottom3ControlJoints[4].replace('BIND_','').replace('JNT','CTRL')\n    ctlDownR = top3Bottom3ControlJoints[5].replace('BIND_','').replace('JNT','CTRL')\n     \n    mc.select(ctlUpL,ctlUpR,ctlDownL,ctlDownR)\n    lockUnlockChannels(lock=True,channels=['R','S'])\n    if LEFTRIGHT == '_L':\n        setCtrlColor('blue')\n    else:\n        setCtrlColor('red')\n    \n    for myCtl in [ctlUpL,ctlUpR,ctlDownL,ctlDownR]:\n        mc.select(myCtl+'.cv[0:8]')\n        mc.scale(.6,.6,1,r=True,os=True)\n    \n    mc.select(ctlL,ctlR,ctlUpM,ctlDownM)\n    lockUnlockChannels(lock=True,channels=['S'])\n    \n    # point constrain the in-between ctrls to follow the top,bottom,left,right controls\n    mc.parentConstraint(ctlL,ctlUpM,ctlUpL+'_offset',mo=True)\n    mc.parentConstraint(ctlR,ctlUpM,ctlUpR+'_offset',mo=True)\n    mc.parentConstraint(ctlL,ctlDownM,ctlDownL+'_offset',mo=True)\n    mc.parentConstraint(ctlR,ctlDownM,ctlDownR+'_offset',mo=True)\n    \n    # group everything generated by this script\n    allCurvesGrp = mc.group(allCurves,n='GRP_eyelid_CRVs'+LEFTRIGHT)\n    ctlJntsGrp = mc.group(ctlJnts,n='GRP_eyelid_CTJTs'+LEFTRIGHT)\n    ctlOffsetGrpsGrp = mc.group(ctlOffsetGrps,n='GRP_eyelid_CTRLs'+LEFTRIGHT)\n    allCJntsGrp = mc.group(allCJnts,n='GRP_eyelid_TRG_jnts'+LEFTRIGHT)\n    allLocsGrp = mc.group(allLocs,n='GRP_eyelid_LOCs'+LEFTRIGHT)\n    masterEyelidGrp = mc.group(worldUpObject,allCurvesGrp,ctlJntsGrp,ctlOffsetGrpsGrp,allCJntsGrp,allLocsGrp,n='GRP_eyelid'+LEFTRIGHT)\n    mc.select(masterEyelidGrp,eyeCenter)\n    mc.matchTransform(piv=True)\n    \n    mc.hide(ctlJntsGrp,allCJntsGrp,allLocsGrp,worldUpObject)\n    \n    #-------------------PAUSE HERE and make the LD curves match the HD curves better (by moving CVs on LD curves)\n    #----------------------------P  A  R  T  2-----------------------------\n    \n    import maya.cmds as mc\n    import maya.mel as mel\n    \n    #LEFTRIGHT='_L'\n    \n    upWire = mel.eval(\"wire -gw false -en 1.000000 -ce 0.000000 -li 0.000000 -w LDup_CRV\"+LEFTRIGHT+\" HDup_CRV\"+LEFTRIGHT+\";\")[0]\n    upWire = mc.rename(upWire,'LtoHup_wire'+LEFTRIGHT)\n    mc.setAttr(upWire+'.scale[0]',0)\n    mc.setAttr(upWire+'.dropoffDistance[0]',1000000000)\n    \n    downWire = mel.eval(\"wire -gw false -en 1.000000 -ce 0.000000 -li 0.000000 -w LDdown_CRV\"+LEFTRIGHT+\" HDdown_CRV\"+LEFTRIGHT+\";\")[0]\n    downWire = mc.rename(downWire,'LtoHdown_wire'+LEFTRIGHT)\n    mc.setAttr(downWire+'.scale[0]',0)\n    mc.setAttr(downWire+'.dropoffDistance[0]',1000000000)\n    \n    ctlJnts = ['ML_Eyelid_CTJT'+LEFTRIGHT,\n    'eyelidUp_04_CTJT'+LEFTRIGHT,\n    'eyelidUp_08_CTJT'+LEFTRIGHT,\n    'eyelidUp_12_CTJT'+LEFTRIGHT,\n    'MR_Eyelid_CTJT'+LEFTRIGHT,\n    'eyelidDown_04_CTJT'+LEFTRIGHT,\n    'eyelidDown_08_CTJT'+LEFTRIGHT,\n    'eyelidDown_12_CTJT'+LEFTRIGHT]\n    \n    mc.select(ctlJnts,'LDup_CRV'+LEFTRIGHT,'LDdown_CRV'+LEFTRIGHT)\n    mel.eval('newSkinCluster \"-toSelectedBones -bindMethod 0  -normalizeWeights 1 -weightDistribution 0 -mi 1  -dr 4 -rui false  , multipleBindPose, 0\";')\n    \n    mc.hide('GRP_eyelid_CRVs'+LEFTRIGHT)\n    \n    #----------------------------P  A  R  T  3-----------------------------\n    import maya.cmds as mc\n    import maya.mel as mel\n    \n    #LEFTRIGHT='_L'\n    \n    if LEFTRIGHT == '_L':\n        eyeCtrl = 'eye_CTRL_L'\n    else:\n        eyeCtrl = 'eye_CTRL_R'\n    \n    \n    LDblink = mc.duplicate('LDup_CRV'+LEFTRIGHT,n='LDblink_CRV'+LEFTRIGHT)[0]\n    mc.select('LDup_CRV'+LEFTRIGHT,'LDdown_CRV'+LEFTRIGHT,LDblink)\n    LDbs = mc.blendShape(n=\"LDblink_BS\"+LEFTRIGHT, before=True)[0]\n    \n    mc.addAttr(eyeCtrl,longName='blinkHeight',at='double',k=True,min=0,max=1)\n    \n    revNode = mc.createNode('reverse',n=LDbs.replace('_BS','_reverse'))\n    \n    mc.connectAttr(eyeCtrl+'.blinkHeight',revNode+'.inputX',f=True)\n    mc.connectAttr(revNode+'.outputX',LDbs+'.weight[1]',f=True)\n    mc.connectAttr(eyeCtrl+'.blinkHeight',LDbs+'.weight[0]',f=True)\n    \n    HDupBlink = mc.duplicate('HDup_CRV'+LEFTRIGHT,n='HDupBlink_CRV'+LEFTRIGHT)[0]\n    HDdownBlink = mc.duplicate('HDdown_CRV'+LEFTRIGHT,n='HDdownBlink_CRV'+LEFTRIGHT)[0]\n    \n    mc.setAttr(eyeCtrl+'.blinkHeight',1)\n    HDupWire = mel.eval(\"wire -gw false -en 1.000000 -ce 0.000000 -li 0.000000 -w \"+LDblink+\" \"+HDupBlink+\";\")[0]\n    HDupWire = mc.rename(HDupWire,'blinkToHDup_wire'+LEFTRIGHT)\n    mc.setAttr(HDupWire+'.scale[0]',0)\n    mc.setAttr(HDupWire+'.dropoffDistance[0]',1000000000)\n    \n    mc.setAttr(eyeCtrl+'.blinkHeight',0)\n    HDdownWire = mel.eval(\"wire -gw false -en 1.000000 -ce 0.000000 -li 0.000000 -w \"+LDblink+\" \"+HDdownBlink+\";\")[0]\n    HDdownWire = mc.rename(HDdownWire,'blinkToHDdown_wire'+LEFTRIGHT)\n    mc.setAttr(HDdownWire+'.scale[0]',0)\n    mc.setAttr(HDdownWire+'.dropoffDistance[0]',1000000000)\n    \n    \n    mc.select(HDupBlink,'HDup_CRV'+LEFTRIGHT)\n    HDupBs = mc.blendShape(n=\"HDupBlink_BS\"+LEFTRIGHT, before=True)[0]\n    \n    mc.select(HDdownBlink,'HDdown_CRV'+LEFTRIGHT)\n    HDdownBs = mc.blendShape(n=\"HDdownBlink_BS\"+LEFTRIGHT, before=True)[0]\n    \n    \n    mc.addAttr(eyeCtrl,longName='smartBlink',at='double',k=True,min=0,max=1)\n    mc.connectAttr(eyeCtrl+'.smartBlink',HDupBs+'.weight[0]')\n    mc.connectAttr(eyeCtrl+'.smartBlink',HDdownBs+'.weight[0]')\n    \n    \n    noInheritTransformList = ['LDup_CRV'+LEFTRIGHT,\n                              'LDdown_CRV'+LEFTRIGHT,\n                              'LDblink_CRV'+LEFTRIGHT,\n                              'GRP_eyelid_LOCs'+LEFTRIGHT]\n    \n    for thing in noInheritTransformList:\n        mc.setAttr(thing+'.inheritsTransform', False)\n                              \n                              \n    mc.select('BIND_invJaw_JNT','BIND_eyeball_JNT'+LEFTRIGHT,'GRP_eyelid'+LEFTRIGHT)\n    fleshyPc = mc.parentConstraint(mo=True)[0]\n    fleshyPcTargets = mc.parentConstraint(fleshyPc,weightAliasList=True,q=True)\n    mc.addAttr(eyeCtrl,longName='fleshyLids',at='double',k=True,min=0,max=1)\n    \n    fleshyRev = mc.createNode('reverse',n='fleshyLids_reverse'+LEFTRIGHT)\n    mc.connectAttr(eyeCtrl+'.fleshyLids',fleshyRev+'.inputX',f=True)\n    mc.connectAttr(fleshyRev+'.outputX',fleshyPc+'.'+fleshyPcTargets[0],f=True)\n    mc.connectAttr(eyeCtrl+'.fleshyLids',fleshyPc+'.'+fleshyPcTargets[1],f=True)\n    \n    mc.setAttr(eyeCtrl+'.fleshyLids',0.05)\n    mc.setAttr(eyeCtrl+'.blinkHeight',0.15)\n    \n    mc.select('GRP_eyelid'+LEFTRIGHT)\n    #lockUnlockChannels(breakConnections=True,channels=['ry'])\n\neyelidGrp = mc.group(['GRP_eyelid_L','GRP_eyelid_R'],n='GRP_eyelids')\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
