<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="accomplice_fx" label="Accomplice FX">
    <memberTool name="create_lop_nodes"/>
    <memberTool name="create_output_nulls"/>
    <memberTool name="add_missing_sublayers_to_main_fx_file"/>
    <memberTool name="add_missing_sublayers_to_multiple_main_fx_files"/>
    <memberTool name="configure_speedtree_leaves"/>
    <memberTool name="configure_speedtree_bark"/>
    <memberTool name="unlock_all_nodes"/>
    <memberTool name="open_fx_file"/>
    <memberTool name="render_flipbooks_to_edit"/>
    <memberTool name="Run CFX"/>
  </toolshelf>

  <tool name="create_output_nulls" label="Create Output Nulls" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[selected = hou.selectedNodes()
for selected_node in selected:
    outputs = selected_node.outputConnectors()

    for i in range(len(outputs)):
        null_node = selected_node.createOutputNode("null")
        null_node.setInput(0, selected_node, i)
        
        # Prompt the user for a name
        result = hou.ui.readInput("Enter a name for the null node (not including 'OUT_' prefix)")

        # The result is a tuple where the first item is the button clicked (0 for OK, 1 for Cancel) 
        # and the second item is the text entered by the user
        if result[0] == 0:
            null_node.setName("OUT_" + result[1].replace(" ", "_"), unique_name=True)
        
        null_node.setCurrent(True, clear_all_selected=True)
]]></script>
  </tool>

  <tool name="add_missing_sublayers_to_main_fx_file" label="Add Missing Sublayers to Main FX File" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
import hou
from pipe.shared.helper.utilities.houdini_utils import HoudiniFXUtils, HoudiniUtils

shot = HoudiniUtils.get_shot_for_file()
HoudiniFXUtils.insert_missing_cached_fx_into_main_fx_file(shot)
]]></script>
  </tool>

  <tool name="add_missing_sublayers_to_multiple_main_fx_files" label="Add Missing Sublayers to Multiple Main FX File" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
from pipe.shared.helper.utilities.houdini_utils import HoudiniFXUtils
HoudiniFXUtils.user_interface_for_resolving_missing_sublayers()
]]></script>
  </tool>

  <tool name="create_lop_nodes" label="Create Lop Nodes" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
from pipe.shared.proxy import proxy
from pipe.shared.helper.utilities.houdini_utils import HoudiniFXUtils
from abc import ABC, abstractmethod

# Set constants

selection = hou.selectedNodes()
if len(selection) != 1:
    hou.ui.displayMessage(
        'Please select one null with the naming convention: "OUT_" + <name of effect>.',
        severity=hou.severityType.Message
    )
    raise Exception('Select only one node')

usd_wrapper = HoudiniFXUtils.USDGeometryCacheEffectWrapper(selection[0])
usd_wrapper.wrap()
hou.ui.setStatusMessage(
    'Lop nodes created successfully! Navigate to /stage to see the results.',
    severity=hou.severityType.Message
)]]></script>
  </tool>

  <tool name="configure_speedtree_bark" label="SpeedTree Bark" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou


# Get the currently selected node
selected_nodes = hou.selectedNodes()

# Check if a node is selected
if len(selected_nodes) > 0:
    for current_bark_geo_node in selected_nodes:
        assert current_bark_geo_node.type().name() == "geo", "The selected node is not a geo node."

        # Check if the child node is also a geo node
        vertex_cache_node = current_bark_geo_node.node('vertex_cache')
        assert vertex_cache_node is not None, "The current leaf geo node does not have a vertex_cache node."
        
        # Create an accomp_configure_bark node and connect it to the vertex cache node
        accomp_configure_bark_node = current_bark_geo_node.createNode("accomp_configure_bark")
        accomp_configure_bark_node.setInput(0, vertex_cache_node) 

        # Add an OUT_render null node and connect it to the accomp_configure_bark node
        out_render = accomp_configure_bark_node.createOutputNode("null", "OUT_render")

        out_render.setDisplayFlag(True)
        out_render.setRenderFlag(True)
        current_bark_geo_node.layoutChildren()
else:
    print("No nodes are selected.")]]></script>
  </tool>

  <tool name="configure_speedtree_leaves" label="SpeedTree Leaves" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou


# Get the currently selected node
selected_nodes = hou.selectedNodes()

# Check if a node is selected
if len(selected_nodes) > 0:
    for current_leaf_geo_node in selected_nodes:
        assert current_leaf_geo_node.type().name() == "geo", "The selected node is not a geo node."
        print(current_leaf_geo_node.name())

        # Check if the child node is also a geo node
        vertex_cache_node = current_leaf_geo_node.node('vertex_cache')
        assert vertex_cache_node is not None, "The current leaf geo node does not have a vertex_cache node."

        # the fbx import node is the input node into the vertex_cache node
        fbx_import_node = vertex_cache_node.inputs()[0]

        prepare_leaves_for_shading_node = current_leaf_geo_node.createNode("accomp_prepare_leaves_for_shading")

        # Create a null to preview the clusters from the prepare_leaves_for_shading node
        null_preview_clusters_node = current_leaf_geo_node.createNode("null", "OUT_preview_clusters")
        null_preview_clusters_node.setInput(0, prepare_leaves_for_shading_node, output_index=1)

        # place the prepare leaves for shading node between the fbx import node and the vertex cache node
        prepare_leaves_for_shading_node.setInput(0, fbx_import_node)
        vertex_cache_node.setInput(0, prepare_leaves_for_shading_node)

        # Create a scatter leaves on ground around tree node and connect it to the prepare leaves for shading node
        scatter_leaves_on_ground_around_tree_node = current_leaf_geo_node.createNode("scatter_leaves_on_ground_around_tree") # not prefixed with accomp because not specific to student accomplice workflow
        scatter_leaves_on_ground_around_tree_node.setInput(0, prepare_leaves_for_shading_node)

        # Create an animate leaves falling from tree node and connect it to the vertex cache node
        animate_leaves_falling_from_tree_node = current_leaf_geo_node.createNode("animate_leaves_falling_from_tree")
        animate_leaves_falling_from_tree_node.setInput(0, vertex_cache_node)

        # Merge the scatter leaves on ground around tree node and the animate leaves falling from tree node
        merge_node = current_leaf_geo_node.createNode("merge")
        merge_node.setInput(0, scatter_leaves_on_ground_around_tree_node)
        merge_node.setInput(1, animate_leaves_falling_from_tree_node)

        # Create a post process leaves node after the merge
        post_process_leaves_node = current_leaf_geo_node.createNode("accomp_post_process_leaves")
        post_process_leaves_node.setInput(0, merge_node)

        # Create two null nodes, one called OUT_render and connect it to the first input of the post process leaves node. The second one is called OUT_proxy and connect it to the second input of the post process leaves node.
        null_out_render_node = current_leaf_geo_node.createNode("null", "OUT_render")
        null_out_render_node.setInput(0, post_process_leaves_node)
        
        null_out_proxy_node = current_leaf_geo_node.createNode("null", "OUT_proxy")
        null_out_proxy_node.setInput(0, post_process_leaves_node, output_index=1)
        
        


        null_out_render_node.setDisplayFlag(True)
        null_out_render_node.setRenderFlag(True)
        current_leaf_geo_node.layoutChildren()
    
else:
    print("No nodes are selected.")]]></script>
  </tool>

  <tool name="unlock_all_nodes" label="Unlock All Nodes" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou


starting_node = hou.node('/')
print('Starting unlocking nodes!')

def unlock_all_chop_nodes(current_node):
    print("current node: " + current_node.name())
    try:
        if current_node.isLocked():
            current_node.setLocked(False)
            print("unlocked node: " + current_node.name())
    except Exception as e:
        # print(e)
        pass
    for node in current_node.children():
        unlock_all_chop_nodes(node)

def unlock_all_sop_nodes(current_node):
    try:
        if current_node.isHardLocked():
            current_node.setHardLocked(False)
            print("unlocked node: " + current_node.name())
    except Exception as e:
        # print(e)
        pass
    for node in current_node.children():
        unlock_all_sop_nodes(node)

unlock_all_chop_nodes(starting_node)
unlock_all_sop_nodes(starting_node)

print('All nodes unlocked')]]></script>
  </tool>

  <tool name="open_fx_file" label="Open FX File" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[from pipe.shared.helper.utilities.houdini_utils import HoudiniFXUtils

HoudiniFXUtils.open_houdini_fx_file()
]]></script>
  </tool>

  <tool name="render_flipbooks_to_edit" label="Render Flipbooks to Edit" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
import hou
import pipe
from pipe.shared.helper.utilities.houdini_utils import HoudiniUtils, HoudiniNodeUtils, HoudiniPathUtils, HoudiniFXUtils

def setCamera(camera_path, viewport='persp1'):
    desktop = hou.ui.curDesktop()
    viewer = desktop.paneTabOfType(hou.paneTabType.SceneViewer)
    viewport = viewer.findViewport(viewport);       
    viewport.setCamera(camera_path)


def operation():
    shot = HoudiniUtils.get_shot_for_file()
    setCamera(HoudiniPathUtils.get_camera_prim_path(shot))
    end_fx_node = hou.node('/stage/END_fx')
    stage = hou.node('/stage')
    HoudiniUtils.render_flipbook_to_video('/groups/accomplice/edit/shots/FX/' + shot.get_sequence(), shot.get_name())

HoudiniFXUtils.perform_operation_on_selected_shots(operation, "Render Flipbooks to Edit", 'fx')
  ]]></script>
  </tool>

  <tool name="Run CFX" label="Run CFX" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import pipe
import hou
from pipe.shared import Shot
from pipe.shared.helper.utilities.houdini_utils import HoudiniUtils, HoudiniNodeUtils, HoudiniFXUtils
import os
import csv

def add_node_below_specified_node(specified_node, new_node_type):
    """
    Adds a new node of specified type directly below a specified node.
    
    Args:
        specified_node (hou.Node): The node below which the new node will be added.
        new_node_type (str): The type of the new node to be added.
        
    Returns:
        hou.Node: The newly added node.
    """
    parent_node = specified_node.parent()
    new_node = parent_node.createNode(new_node_type)
    new_node.setPosition(specified_node.position() + hou.Vector2(0, -1))  # Adjust the offset as needed
    new_node.setInput(0, specified_node)
    return new_node

def check_which_cfx(file_path,shot_name):
    actions_array = []
    with open(file_path, 'r') as file:
        reader = csv.DictReader(file)
        
        for row_number, row in enumerate(reader, start=1):
            curr_shot_name = row.get('Shot',0)
            if(curr_shot_name == shot_name):
                print("shotname: " + curr_shot_name)
                action_1 = int(row.get('Ed_CFX', 0))
                action_2 = int(row.get('Letty_CFX', 0))
                action_3 = int(row.get('Vaughn_CFX', 0))
                action_4 = int(row.get('Seatbelt_CFX', 0))
                actions_array = [action_1, action_2, action_3, action_4]

    return actions_array

def find_first_child_of_type(node, node_type):
    """
    Finds the first child node of a specified type for a given node.
    
    Args:
        node (hou.Node): The parent node to search within.
        node_type (str): The type of node to search for.
        
    Returns:
        hou.Node or None: The first child node of the specified type, or None if not found.
    """
    for child in node.children():
        if child.type().name() == node_type:
            return child
    return None
    
all_shots = [Shot(shot) for shot in pipe.server.get_shot_list()]

cfx_shot_file_paths = sorted([shot.get_shotfile('cfx') for shot in all_shots])

ed_cfx_node = "jbake007::dev::accomplice_ed_cfx_setup_FIX"
letty_cfx_node = "kiaras17::dev::accomplice_Letty_cfx_setup_FIX"
vaughn_cfx_node = "kiaras17::dev::accomplice_Vaughn_cfx_setup_FIX"
letty_seatbelt_node = "James_Baker::accomplice_letty_seatbelt_experimental"

subdivide_fix_node = "Jamesbaker::main::Hair_Subdivide_Fix"
csv_file = "/groups/accomplice/pipeline/production/sequences/A/shots/000/cfx/shot_cfx.csv"

def operation1():
    stage_node = hou.node('/stage')
    begin_CFX_node = hou.node('/stage/BEGIN_cfx')
    end_CFX_node = hou.node('/stage/END_cfx')


    if begin_CFX_node is not None:
        shot_name = HoudiniUtils.get_shot_name()
        usd_ropname = "OUT_"+shot_name+"_cfx"
        usd_rop = hou.node(usd_ropname)
        which_cfx = check_which_cfx(csv_file,shot_name)
        currnode = begin_CFX_node
        
        if(not which_cfx or (which_cfx[0] == 0 and which_cfx[1] == 0 and which_cfx[2] == 0 and which_cfx[3] == 0)):
            print("No shot info for " + shot_name + " in csv!")
            
        else:
            if(which_cfx[0]):
                ed_node = add_node_below_specified_node(currnode,ed_cfx_node)
                currnode = ed_node
            if(which_cfx[1]):
                letty_node = add_node_below_specified_node(currnode,letty_cfx_node)
                currnode = letty_node
            if(which_cfx[2]):
                vaughn_node = add_node_below_specified_node(currnode,vaughn_cfx_node)
                currnode = vaughn_node
            if(which_cfx[3]):
                seatbelt_node = add_node_below_specified_node(currnode,letty_seatbelt_node)
                currnode = seatbelt_node
            
            end_CFX_node.setPosition(currnode.position() + hou.Vector2(0, -1))  # Adjust the offset as needed
            end_CFX_node.setInput(0, currnode)
            
    
            if(which_cfx[0]):
                ed_node.parm("cache_all").pressButton()
            if(which_cfx[1]):
                letty_node.parm("cache_all").pressButton()
            if(which_cfx[2]):
                vaughn_node.parm("execute").pressButton()
            if(which_cfx[3]):
                seatbelt_node.parm("cookall").pressButton()
            usd_rop_node.parm("execute").pressButton()

    else:
        print("missing BEGIN_cfx node")


shots = []
exceptions = []

HoudiniFXUtils.perform_operation_on_selected_shots(operation1,"Cook CFX in Shots","cfx",save_after_operation=True)



print(str(list(zip(shots, exceptions))))]]></script>
  </tool>
</shelfDocument>
