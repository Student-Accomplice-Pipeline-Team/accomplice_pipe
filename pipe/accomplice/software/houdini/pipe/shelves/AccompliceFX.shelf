<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="accomplice_fx" label="Accomplice FX">
    <memberTool name="create_lop_nodes"/>
    <memberTool name="create_output_nulls"/>
    <memberTool name="compile_fx_usd"/>
    <memberTool name="configure_speedtree_leaves"/>
    <memberTool name="configure_speedtree_bark"/>
    <memberTool name="unlock_all_nodes"/>
    <memberTool name="open_fx_file"/>
  </toolshelf>

  <tool name="create_output_nulls" label="Create Output Nulls" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[selected = hou.selectedNodes()
for selected_node in selected:
    outputs = selected_node.outputConnectors()

    for i in range(len(outputs)):
        null_node = selected_node.createOutputNode("null")
        null_node.setInput(0, selected_node, i)
        
        # Prompt the user for a name
        result = hou.ui.readInput("Enter a name for the null node (not including 'OUT_' prefix)")

        # The result is a tuple where the first item is the button clicked (0 for OK, 1 for Cancel) 
        # and the second item is the text entered by the user
        if result[0] == 0:
            null_node.setName("OUT_" + result[1].replace(" ", "_"), unique_name=True)
        
        null_node.setCurrent(True, clear_all_selected=True)
]]></script>
  </tool>

  <tool name="compile_fx_usd" label="Compile FX USD" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os
import hou
from pipe.shared.helper.utilities.houdini_utils import HoudiniFXUtils, HoudiniUtils

HoudiniFXUtils.create_sublayer_nodes_for_cached_fx(HoudiniUtils.get_shot_for_file())]]></script>
  </tool>

  <tool name="create_lop_nodes" label="Create Lop Nodes" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
from pipe.shared.proxy import proxy
from pipe.shared.helper.utilities.houdini_utils import HoudiniFXUtils
from abc import ABC, abstractmethod

# Set constants

selection = hou.selectedNodes()
if len(selection) != 1:
    hou.ui.displayMessage(
        'Please select one null with the naming convention: "OUT_" + <name of effect>.',
        severity=hou.severityType.Message
    )
    raise Exception('Select only one node')

usd_wrapper = HoudiniFXUtils.USDGeometryCacheEffectWrapper(selection[0])
usd_wrapper.wrap()
hou.ui.setStatusMessage(
    'Lop nodes created successfully! Navigate to /stage to see the results.',
    severity=hou.severityType.Message
)]]></script>
  </tool>

  <tool name="configure_speedtree_bark" label="SpeedTree Bark" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou


# Get the currently selected node
selected_nodes = hou.selectedNodes()

# Check if a node is selected
if len(selected_nodes) > 0:
    for current_bark_geo_node in selected_nodes:
        assert current_bark_geo_node.type().name() == "geo", "The selected node is not a geo node."

        # Check if the child node is also a geo node
        vertex_cache_node = current_bark_geo_node.node('vertex_cache')
        assert vertex_cache_node is not None, "The current leaf geo node does not have a vertex_cache node."
        
        # Create an accomp_configure_bark node and connect it to the vertex cache node
        accomp_configure_bark_node = current_bark_geo_node.createNode("accomp_configure_bark")
        accomp_configure_bark_node.setInput(0, vertex_cache_node) 

        # Add an OUT_render null node and connect it to the accomp_configure_bark node
        out_render = accomp_configure_bark_node.createOutputNode("null", "OUT_render")

        out_render.setDisplayFlag(True)
        out_render.setRenderFlag(True)
        current_bark_geo_node.layoutChildren()
else:
    print("No nodes are selected.")]]></script>
  </tool>

  <tool name="configure_speedtree_leaves" label="SpeedTree Leaves" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou


# Get the currently selected node
selected_nodes = hou.selectedNodes()

# Check if a node is selected
if len(selected_nodes) > 0:
    for current_leaf_geo_node in selected_nodes:
        assert current_leaf_geo_node.type().name() == "geo", "The selected node is not a geo node."
        print(current_leaf_geo_node.name())

        # Check if the child node is also a geo node
        vertex_cache_node = current_leaf_geo_node.node('vertex_cache')
        assert vertex_cache_node is not None, "The current leaf geo node does not have a vertex_cache node."

        # the fbx import node is the input node into the vertex_cache node
        fbx_import_node = vertex_cache_node.inputs()[0]

        prepare_leaves_for_shading_node = current_leaf_geo_node.createNode("accomp_prepare_leaves_for_shading")

        # Create a null to preview the clusters from the prepare_leaves_for_shading node
        null_preview_clusters_node = current_leaf_geo_node.createNode("null", "OUT_preview_clusters")
        null_preview_clusters_node.setInput(0, prepare_leaves_for_shading_node, output_index=1)

        # place the prepare leaves for shading node between the fbx import node and the vertex cache node
        prepare_leaves_for_shading_node.setInput(0, fbx_import_node)
        vertex_cache_node.setInput(0, prepare_leaves_for_shading_node)

        # Create a scatter leaves on ground around tree node and connect it to the prepare leaves for shading node
        scatter_leaves_on_ground_around_tree_node = current_leaf_geo_node.createNode("scatter_leaves_on_ground_around_tree") # not prefixed with accomp because not specific to student accomplice workflow
        scatter_leaves_on_ground_around_tree_node.setInput(0, prepare_leaves_for_shading_node)

        # Create an animate leaves falling from tree node and connect it to the vertex cache node
        animate_leaves_falling_from_tree_node = current_leaf_geo_node.createNode("animate_leaves_falling_from_tree")
        animate_leaves_falling_from_tree_node.setInput(0, vertex_cache_node)

        # Merge the scatter leaves on ground around tree node and the animate leaves falling from tree node
        merge_node = current_leaf_geo_node.createNode("merge")
        merge_node.setInput(0, scatter_leaves_on_ground_around_tree_node)
        merge_node.setInput(1, animate_leaves_falling_from_tree_node)

        # Create a post process leaves node after the merge
        post_process_leaves_node = current_leaf_geo_node.createNode("accomp_post_process_leaves")
        post_process_leaves_node.setInput(0, merge_node)

        # Create two null nodes, one called OUT_render and connect it to the first input of the post process leaves node. The second one is called OUT_proxy and connect it to the second input of the post process leaves node.
        null_out_render_node = current_leaf_geo_node.createNode("null", "OUT_render")
        null_out_render_node.setInput(0, post_process_leaves_node)
        
        null_out_proxy_node = current_leaf_geo_node.createNode("null", "OUT_proxy")
        null_out_proxy_node.setInput(0, post_process_leaves_node, output_index=1)
        
        


        null_out_render_node.setDisplayFlag(True)
        null_out_render_node.setRenderFlag(True)
        current_leaf_geo_node.layoutChildren()
    
else:
    print("No nodes are selected.")]]></script>
  </tool>

  <tool name="unlock_all_nodes" label="Unlock All Nodes" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou


starting_node = hou.node('/')
print('Starting unlocking nodes!')

def unlock_all_chop_nodes(current_node):
    print("current node: " + current_node.name())
    try:
        if current_node.isLocked():
            current_node.setLocked(False)
            print("unlocked node: " + current_node.name())
    except Exception as e:
        # print(e)
        pass
    for node in current_node.children():
        unlock_all_chop_nodes(node)

def unlock_all_sop_nodes(current_node):
    try:
        if current_node.isHardLocked():
            current_node.setHardLocked(False)
            print("unlocked node: " + current_node.name())
    except Exception as e:
        # print(e)
        pass
    for node in current_node.children():
        unlock_all_sop_nodes(node)

unlock_all_chop_nodes(starting_node)
unlock_all_sop_nodes(starting_node)

print('All nodes unlocked')]]></script>
  </tool>

  <tool name="open_fx_file" label="Open FX File" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[from pipe.shared.helper.utilities.houdini_utils import HoudiniFXUtils

HoudiniFXUtils.open_houdini_fx_file()
]]></script>
  </tool>
</shelfDocument>
