import os
import sys
import importlib

#pipe modules
import pipe
from pipe.shared import object

# Substance 3D Painter modules
import substance_painter.ui
import substance_painter.export
import substance_painter.project
import substance_painter.textureset

# PySide module to build custom UI
from PySide2 import QtWidgets, QtCore
from PySide2.QtCore import QFile
from PySide2.QtUiTools import QUiLoader
from PySide2.QtWidgets import QApplication, QWidget, QRadioButton, QPushButton, QFileDialog, QTextEdit, QMainWindow, QComboBox, QLineEdit, QSizePolicy

plugin_widgets = []

def start_plugin():

	# Create a text widget for a menu
	Action = QtWidgets.QAction("Accomplice - Import Asset")
	Action.triggered.connect(launch_importer)

	# Add this widget to the existing File menu of the application
	substance_painter.ui.add_action(
		substance_painter.ui.ApplicationMenu.File,
		Action )

	# Store the widget for proper cleanup later when stopping the plugin
	plugin_widgets.append(Action)

def close_plugin():
	# Remove all widgets that have been added to the UI
	for widget in plugin_widgets:
		substance_painter.ui.delete_ui_element(widget)

	plugin_widgets.clear()

if __name__ == "__main__":
	window = start_plugin()
	
def launch_importer():
    # Check for existing windows and close them before opening a new one
    for widget in plugin_widgets:
        if isinstance(widget, QMainWindow):
            widget.close()
            substance_painter.ui.delete_ui_element(widget)
            plugin_widgets.remove(widget)
            break


    #Start window
    ui_file = QFile('importer_UI.ui')
    ui_file.open(QFile.ReadOnly)
    
    #Start window
    global window
    window = SubstanceImporterWindow()
    window.show()

    
    print("Launching Substance Importer")

class SubstanceImporterWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(SubstanceImporterWindow, self).__init__(parent)
        
        self.setup_UI()

    def setup_UI(self):
        self.setWindowTitle("Importer")
        self.resize(400, 100)

        # Make sure the window always stays on top
        self.setWindowFlags(self.windowFlags() | QtCore.Qt.WindowStaysOnTopHint)

        #central widget and Vertical Layout
        self.central_widget = QtWidgets.QWidget()
        self.setCentralWidget(self.central_widget)
        self.mainLayout = QtWidgets.QVBoxLayout()
        self.central_widget.setLayout(self.mainLayout)

        ####Title####
        self.title = QtWidgets.QLabel("Find object file...")
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        font = self.title.font()
        font.setPointSize(30)
        self.title.setFont(font)
        self.mainLayout.addWidget(self.title, 2)

        #########File Chooser Layout#########
        FileChooserLayout = QtWidgets.QHBoxLayout()
        self.mainLayout.addLayout(FileChooserLayout, 3)

        self.fileDisplay = QLineEdit()
        self.fileDisplay.setEnabled(False)
        FileChooserLayout.addWidget(self.fileDisplay)

        self.chooseButton = QPushButton("...")
        self.chooseButton.clicked.connect(self.openFileDialog)
        FileChooserLayout.addWidget(self.chooseButton)

        ##########Buttons##########
        buttonSizePolicy = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Fixed)

        ButtonsLayout = QtWidgets.QHBoxLayout()
        self.mainLayout.addLayout(ButtonsLayout)

        self.cancelButton = QPushButton("Cancel")
        self.cancelButton.clicked.connect(close_plugin)

        ButtonsLayout.addWidget(self.cancelButton)

        self.importButton = QPushButton("Import")
        self.importButton.setEnabled(False)
        self.importButton.clicked.connect(self.import_button)

        ButtonsLayout.addWidget(self.importButton)

    def openFileDialog(self):
        
        fname = QFileDialog.getOpenFileName(self, 'Open file', 'g:\\accomplice\\shading','3D Files (*.obj, *.fbx)')
        self.fileDisplay.setText(fname[0])
        self.importButton.setEnabled(True)
        print(fname[0])

    def import_button(self):
        
        asset_name = self.comboBox.currentText()
        asset_path = pipe.server.get_asset(asset_name)
        mesh_path = self.fileDisplay.text()

        print(asset_name)
        print(mesh_path)

        project_settings = substance_painter.project.Settings(
             default_save_path='g:\\accomplice\\shading\\' + asset_name,
             project_workflow=substance_painter.project.ProjectWorkflow.UVTile,
             export_path='g:\\accomplice\\pipeline\\production\\',
             default_texture_resolution=2048
        )

        substance_painter.project.create(
             mesh_file_path=mesh_path,
             #settings=project_settings
        )

        self.close()

        